
Week09-UARTDMAProtocal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ad0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08003c70  08003c70  00013c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f10  08003f10  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f18  08003f18  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f18  08003f18  00013f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f1c  08003f1c  00013f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  08003f90  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003f90  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a55  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017e7  00000000  00000000  00028af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0002a2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  0002a9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001598c  00000000  00000000  0002b088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ff9  00000000  00000000  00040a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e79  00000000  00000000  00048a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce886  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000200c  00000000  00000000  000ce8dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003c58 	.word	0x08003c58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003c58 	.word	0x08003c58

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fc15 	bl	8000dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f83b 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f8f5 	bl	8000784 <MX_GPIO_Init>
  MX_DMA_Init();
 800059a:	f000 f8cb 	bl	8000734 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800059e:	f000 f89f 	bl	80006e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	UART2.huart = &huart2;
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <main+0x78>)
 80005a4:	4a17      	ldr	r2, [pc, #92]	; (8000604 <main+0x7c>)
 80005a6:	601a      	str	r2, [r3, #0]
	UART2.RxLen = 255;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <main+0x78>)
 80005aa:	22ff      	movs	r2, #255	; 0xff
 80005ac:	80da      	strh	r2, [r3, #6]
	UART2.TxLen = 255;
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <main+0x78>)
 80005b0:	22ff      	movs	r2, #255	; 0xff
 80005b2:	809a      	strh	r2, [r3, #4]
	UARTInit(&UART2);
 80005b4:	4812      	ldr	r0, [pc, #72]	; (8000600 <main+0x78>)
 80005b6:	f000 f955 	bl	8000864 <UARTInit>
	UARTResetStart(&UART2);
 80005ba:	4811      	ldr	r0, [pc, #68]	; (8000600 <main+0x78>)
 80005bc:	f000 f97a 	bl	80008b4 <UARTResetStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		int16_t inputChar = UARTReadChar(&UART2);
 80005c0:	480f      	ldr	r0, [pc, #60]	; (8000600 <main+0x78>)
 80005c2:	f000 f99b 	bl	80008fc <UARTReadChar>
 80005c6:	4603      	mov	r3, r0
 80005c8:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (inputChar != -1)
 80005ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80005ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d2:	d011      	beq.n	80005f8 <main+0x70>
		{
#ifdef UARTDEBUG
			char temp[32];
			sprintf(temp, "Recived [%d]\r\n", inputChar);
 80005d4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	490b      	ldr	r1, [pc, #44]	; (8000608 <main+0x80>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 ff85 	bl	80034ec <siprintf>
			UARTTxWrite(&UART2, (uint8_t*) temp, strlen(temp));
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fdfb 	bl	80001e0 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4619      	mov	r1, r3
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <main+0x78>)
 80005f4:	f000 f9fc 	bl	80009f0 <UARTTxWrite>

		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		UARTTxDumpBuffer(&UART2);
 80005f8:	4801      	ldr	r0, [pc, #4]	; (8000600 <main+0x78>)
 80005fa:	f000 f9a9 	bl	8000950 <UARTTxDumpBuffer>
	{
 80005fe:	e7df      	b.n	80005c0 <main+0x38>
 8000600:	2000008c 	.word	0x2000008c
 8000604:	20000174 	.word	0x20000174
 8000608:	08003c70 	.word	0x08003c70

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fee4 	bl	80033e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <SystemClock_Config+0xd0>)
 8000656:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800067c:	2310      	movs	r3, #16
 800067e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000680:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000684:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000686:	2304      	movs	r3, #4
 8000688:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068a:	2304      	movs	r3, #4
 800068c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fab6 	bl	8001c04 <HAL_RCC_OscConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800069e:	f000 f9ef 	bl	8000a80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	230f      	movs	r3, #15
 80006a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2302      	movs	r3, #2
 80006a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2102      	movs	r1, #2
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fd18 	bl	80020f4 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ca:	f000 f9d9 	bl	8000a80 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_USART2_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000718:	f001 fee8 	bl	80024ec <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000722:	f000 f9ad 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000174 	.word	0x20000174
 8000730:	40004400 	.word	0x40004400

08000734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_DMA_Init+0x4c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a0f      	ldr	r2, [pc, #60]	; (8000780 <MX_DMA_Init+0x4c>)
 8000744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <MX_DMA_Init+0x4c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	2010      	movs	r0, #16
 800075c:	f000 fc7b 	bl	8001056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000760:	2010      	movs	r0, #16
 8000762:	f000 fc94 	bl	800108e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	2011      	movs	r0, #17
 800076c:	f000 fc73 	bl	8001056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000770:	2011      	movs	r0, #17
 8000772:	f000 fc8c 	bl	800108e <HAL_NVIC_EnableIRQ>

}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a2c      	ldr	r2, [pc, #176]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b26      	ldr	r3, [pc, #152]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a25      	ldr	r2, [pc, #148]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a1e      	ldr	r2, [pc, #120]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <MX_GPIO_Init+0xd0>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2120      	movs	r1, #32
 800080e:	4812      	ldr	r0, [pc, #72]	; (8000858 <MX_GPIO_Init+0xd4>)
 8000810:	f001 f9de 	bl	8001bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_GPIO_Init+0xd8>)
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	480d      	ldr	r0, [pc, #52]	; (8000860 <MX_GPIO_Init+0xdc>)
 800082a:	f001 f84d 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800082e:	2320      	movs	r3, #32
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_GPIO_Init+0xd4>)
 8000846:	f001 f83f 	bl	80018c8 <HAL_GPIO_Init>

}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	; 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40020000 	.word	0x40020000
 800085c:	10210000 	.word	0x10210000
 8000860:	40020800 	.word	0x40020800

08000864 <UARTInit>:

/* USER CODE BEGIN 4 */
void UARTInit(UARTStucrture *uart)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <UARTInit+0x4c>)
 800086e:	88db      	ldrh	r3, [r3, #6]
 8000870:	4619      	mov	r1, r3
 8000872:	2001      	movs	r0, #1
 8000874:	f002 fd78 	bl	8003368 <calloc>
 8000878:	4603      	mov	r3, r0
 800087a:	461a      	mov	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <UARTInit+0x4c>)
 8000882:	889b      	ldrh	r3, [r3, #4]
 8000884:	4619      	mov	r1, r3
 8000886:	2001      	movs	r0, #1
 8000888:	f002 fd6e 	bl	8003368 <calloc>
 800088c:	4603      	mov	r3, r0
 800088e:	461a      	mov	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2200      	movs	r2, #0
 800089e:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2200      	movs	r2, #0
 80008a4:	81da      	strh	r2, [r3, #14]

}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000008c 	.word	0x2000008c

080008b4 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6818      	ldr	r0, [r3, #0]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6919      	ldr	r1, [r3, #16]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	88db      	ldrh	r3, [r3, #6]
 80008c8:	461a      	mov	r2, r3
 80008ca:	f001 fec9 	bl	8002660 <HAL_UART_Receive_DMA>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	88db      	ldrh	r3, [r3, #6]
 80008e2:	461a      	mov	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	1ad3      	subs	r3, r2, r3
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8000904:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000908:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	8a9b      	ldrh	r3, [r3, #20]
 800090e:	461c      	mov	r4, r3
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff ffe0 	bl	80008d6 <UARTGetRxHead>
 8000916:	4603      	mov	r3, r0
 8000918:	429c      	cmp	r4, r3
 800091a:	d013      	beq.n	8000944 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	691b      	ldr	r3, [r3, #16]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	8a92      	ldrh	r2, [r2, #20]
 8000924:	4413      	add	r3, r2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	8a9b      	ldrh	r3, [r3, #20]
 800092e:	3301      	adds	r3, #1
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	88d2      	ldrh	r2, [r2, #6]
 8000934:	fb93 f1f2 	sdiv	r1, r3, r2
 8000938:	fb02 f201 	mul.w	r2, r2, r1
 800093c:	1a9b      	subs	r3, r3, r2
 800093e:	b29a      	uxth	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8000944:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8000948:	4618      	mov	r0, r3
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bd90      	pop	{r4, r7, pc}

08000950 <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b20      	cmp	r3, #32
 8000964:	d13d      	bne.n	80009e2 <UARTTxDumpBuffer+0x92>
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <UARTTxDumpBuffer+0x9c>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d139      	bne.n	80009e2 <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <UARTTxDumpBuffer+0x9c>)
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	89da      	ldrh	r2, [r3, #14]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	899b      	ldrh	r3, [r3, #12]
 800097c:	429a      	cmp	r2, r3
 800097e:	d02d      	beq.n	80009dc <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	89da      	ldrh	r2, [r3, #14]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8000988:	429a      	cmp	r2, r3
 800098a:	d906      	bls.n	800099a <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	89da      	ldrh	r2, [r3, #14]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	b29b      	uxth	r3, r3
 8000998:	e005      	b.n	80009a6 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	889a      	ldrh	r2, [r3, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6818      	ldr	r0, [r3, #0]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	8992      	ldrh	r2, [r2, #12]
 80009b4:	4413      	add	r3, r2
 80009b6:	89fa      	ldrh	r2, [r7, #14]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f001 fde5 	bl	8002588 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	899b      	ldrh	r3, [r3, #12]
 80009c2:	461a      	mov	r2, r3
 80009c4:	89fb      	ldrh	r3, [r7, #14]
 80009c6:	4413      	add	r3, r2
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	8892      	ldrh	r2, [r2, #4]
 80009cc:	fb93 f1f2 	sdiv	r1, r3, r2
 80009d0:	fb02 f201 	mul.w	r2, r2, r1
 80009d4:	1a9b      	subs	r3, r3, r2
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <UARTTxDumpBuffer+0x9c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	701a      	strb	r2, [r3, #0]
	}
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200000a4 	.word	0x200000a4

080009f0 <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	4613      	mov	r3, r2
 80009fc:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	889b      	ldrh	r3, [r3, #4]
 8000a02:	88fa      	ldrh	r2, [r7, #6]
 8000a04:	4293      	cmp	r3, r2
 8000a06:	bf28      	it	cs
 8000a08:	4613      	movcs	r3, r2
 8000a0a:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8000a0c:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	889b      	ldrh	r3, [r3, #4]
 8000a12:	4619      	mov	r1, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	89db      	ldrh	r3, [r3, #14]
 8000a18:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	bfa8      	it	ge
 8000a1e:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8000a20:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	89d2      	ldrh	r2, [r2, #14]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	8aba      	ldrh	r2, [r7, #20]
 8000a2e:	68b9      	ldr	r1, [r7, #8]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f002 fccb 	bl	80033cc <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	89db      	ldrh	r3, [r3, #14]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	8afb      	ldrh	r3, [r7, #22]
 8000a3e:	4413      	add	r3, r2
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	8892      	ldrh	r2, [r2, #4]
 8000a44:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a48:	fb02 f201 	mul.w	r2, r2, r1
 8000a4c:	1a9b      	subs	r3, r3, r2
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8000a54:	8afa      	ldrh	r2, [r7, #22]
 8000a56:	8abb      	ldrh	r3, [r7, #20]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d00a      	beq.n	8000a72 <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	6898      	ldr	r0, [r3, #8]
 8000a60:	8abb      	ldrh	r3, [r7, #20]
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8000a66:	8afa      	ldrh	r2, [r7, #22]
 8000a68:	8abb      	ldrh	r3, [r7, #20]
 8000a6a:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	f002 fcad 	bl	80033cc <memcpy>
	}
	UARTTxDumpBuffer(uart);
 8000a72:	68f8      	ldr	r0, [r7, #12]
 8000a74:	f7ff ff6c 	bl	8000950 <UARTTxDumpBuffer>

}
 8000a78:	bf00      	nop
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a88:	e7fe      	b.n	8000a88 <Error_Handler+0x8>
	...

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abc:	6413      	str	r3, [r2, #64]	; 0x40
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aca:	2007      	movs	r0, #7
 8000acc:	f000 fab8 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a4c      	ldr	r2, [pc, #304]	; (8000c2c <HAL_UART_MspInit+0x150>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	f040 8091 	bne.w	8000c22 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	4b4a      	ldr	r3, [pc, #296]	; (8000c30 <HAL_UART_MspInit+0x154>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	4a49      	ldr	r2, [pc, #292]	; (8000c30 <HAL_UART_MspInit+0x154>)
 8000b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b10:	4b47      	ldr	r3, [pc, #284]	; (8000c30 <HAL_UART_MspInit+0x154>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b43      	ldr	r3, [pc, #268]	; (8000c30 <HAL_UART_MspInit+0x154>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	4a42      	ldr	r2, [pc, #264]	; (8000c30 <HAL_UART_MspInit+0x154>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2c:	4b40      	ldr	r3, [pc, #256]	; (8000c30 <HAL_UART_MspInit+0x154>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b38:	230c      	movs	r3, #12
 8000b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4838      	ldr	r0, [pc, #224]	; (8000c34 <HAL_UART_MspInit+0x158>)
 8000b54:	f000 feb8 	bl	80018c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000b58:	4b37      	ldr	r3, [pc, #220]	; (8000c38 <HAL_UART_MspInit+0x15c>)
 8000b5a:	4a38      	ldr	r2, [pc, #224]	; (8000c3c <HAL_UART_MspInit+0x160>)
 8000b5c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000b5e:	4b36      	ldr	r3, [pc, #216]	; (8000c38 <HAL_UART_MspInit+0x15c>)
 8000b60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b64:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b66:	4b34      	ldr	r3, [pc, #208]	; (8000c38 <HAL_UART_MspInit+0x15c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b6c:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <HAL_UART_MspInit+0x15c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b72:	4b31      	ldr	r3, [pc, #196]	; (8000c38 <HAL_UART_MspInit+0x15c>)
 8000b74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b78:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <HAL_UART_MspInit+0x15c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <HAL_UART_MspInit+0x15c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <HAL_UART_MspInit+0x15c>)
 8000b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b8c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <HAL_UART_MspInit+0x15c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <HAL_UART_MspInit+0x15c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b9a:	4827      	ldr	r0, [pc, #156]	; (8000c38 <HAL_UART_MspInit+0x15c>)
 8000b9c:	f000 fa92 	bl	80010c4 <HAL_DMA_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000ba6:	f7ff ff6b 	bl	8000a80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a22      	ldr	r2, [pc, #136]	; (8000c38 <HAL_UART_MspInit+0x15c>)
 8000bae:	639a      	str	r2, [r3, #56]	; 0x38
 8000bb0:	4a21      	ldr	r2, [pc, #132]	; (8000c38 <HAL_UART_MspInit+0x15c>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000bb6:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000bb8:	4a22      	ldr	r2, [pc, #136]	; (8000c44 <HAL_UART_MspInit+0x168>)
 8000bba:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000bbc:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000bbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bc2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000bc6:	2240      	movs	r2, #64	; 0x40
 8000bc8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000bd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bd6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000bf6:	4812      	ldr	r0, [pc, #72]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000bf8:	f000 fa64 	bl	80010c4 <HAL_DMA_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000c02:	f7ff ff3d 	bl	8000a80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000c0a:	635a      	str	r2, [r3, #52]	; 0x34
 8000c0c:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <HAL_UART_MspInit+0x164>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2026      	movs	r0, #38	; 0x26
 8000c18:	f000 fa1d 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c1c:	2026      	movs	r0, #38	; 0x26
 8000c1e:	f000 fa36 	bl	800108e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	; 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40004400 	.word	0x40004400
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000
 8000c38:	200000b4 	.word	0x200000b4
 8000c3c:	40026088 	.word	0x40026088
 8000c40:	20000114 	.word	0x20000114
 8000c44:	400260a0 	.word	0x400260a0

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 f8e4 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <DMA1_Stream5_IRQHandler+0x10>)
 8000ca2:	f000 fba7 	bl	80013f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200000b4 	.word	0x200000b4

08000cb0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <DMA1_Stream6_IRQHandler+0x10>)
 8000cb6:	f000 fb9d 	bl	80013f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000114 	.word	0x20000114

08000cc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <USART2_IRQHandler+0x10>)
 8000cca:	f001 fcf9 	bl	80026c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000174 	.word	0x20000174

08000cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <_sbrk+0x5c>)
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <_sbrk+0x60>)
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <_sbrk+0x64>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <_sbrk+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d207      	bcs.n	8000d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d08:	f002 fb36 	bl	8003378 <__errno>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	e009      	b.n	8000d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <_sbrk+0x64>)
 8000d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20020000 	.word	0x20020000
 8000d38:	00000400 	.word	0x00000400
 8000d3c:	200000a8 	.word	0x200000a8
 8000d40:	200001d0 	.word	0x200001d0

08000d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <SystemInit+0x20>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4e:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <SystemInit+0x20>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d6c:	480d      	ldr	r0, [pc, #52]	; (8000da4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d6e:	490e      	ldr	r1, [pc, #56]	; (8000da8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d84:	4c0b      	ldr	r4, [pc, #44]	; (8000db4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d92:	f7ff ffd7 	bl	8000d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d96:	f002 faf5 	bl	8003384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9a:	f7ff fbf5 	bl	8000588 <main>
  bx  lr    
 8000d9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dac:	08003f20 	.word	0x08003f20
  ldr r2, =_sbss
 8000db0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000db4:	200001cc 	.word	0x200001cc

08000db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC_IRQHandler>
	...

08000dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <HAL_Init+0x40>)
 8000dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <HAL_Init+0x40>)
 8000dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_Init+0x40>)
 8000dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f92b 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f000 f808 	bl	8000e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f7ff fe4c 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023c00 	.word	0x40023c00

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x54>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x58>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f943 	bl	80010aa <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00e      	b.n	8000e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d80a      	bhi.n	8000e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f000 f90b 	bl	8001056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_InitTick+0x5c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000004 	.word	0x20000004

08000e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x20>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x24>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <HAL_IncTick+0x24>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008
 8000e84:	200001b8 	.word	0x200001b8

08000e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_GetTick+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	200001b8 	.word	0x200001b8

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4907      	ldr	r1, [pc, #28]	; (8000f3c <__NVIC_EnableIRQ+0x38>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	; (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	; (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800100c:	d301      	bcc.n	8001012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2301      	movs	r3, #1
 8001010:	e00f      	b.n	8001032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <SysTick_Config+0x40>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101a:	210f      	movs	r1, #15
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f7ff ff8e 	bl	8000f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <SysTick_Config+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	; (800103c <SysTick_Config+0x40>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff29 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001068:	f7ff ff3e 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 800106c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff ff8e 	bl	8000f94 <NVIC_EncodePriority>
 8001078:	4602      	mov	r2, r0
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff5d 	bl	8000f40 <__NVIC_SetPriority>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff31 	bl	8000f04 <__NVIC_EnableIRQ>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffa2 	bl	8000ffc <SysTick_Config>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010d0:	f7ff feda 	bl	8000e88 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e099      	b.n	8001214 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2202      	movs	r2, #2
 80010ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0201 	bic.w	r2, r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001100:	e00f      	b.n	8001122 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001102:	f7ff fec1 	bl	8000e88 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b05      	cmp	r3, #5
 800110e:	d908      	bls.n	8001122 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2220      	movs	r2, #32
 8001114:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2203      	movs	r2, #3
 800111a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e078      	b.n	8001214 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1e8      	bne.n	8001102 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	4b38      	ldr	r3, [pc, #224]	; (800121c <HAL_DMA_Init+0x158>)
 800113c:	4013      	ands	r3, r2
 800113e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800114e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800115a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001166:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a1b      	ldr	r3, [r3, #32]
 800116c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4313      	orrs	r3, r2
 8001172:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	2b04      	cmp	r3, #4
 800117a:	d107      	bne.n	800118c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	4313      	orrs	r3, r2
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	4313      	orrs	r3, r2
 800118a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f023 0307 	bic.w	r3, r3, #7
 80011a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d117      	bne.n	80011e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4313      	orrs	r3, r2
 80011be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00e      	beq.n	80011e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 fb01 	bl	80017d0 <DMA_CheckFifoParam>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d008      	beq.n	80011e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2240      	movs	r2, #64	; 0x40
 80011d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011e2:	2301      	movs	r3, #1
 80011e4:	e016      	b.n	8001214 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 fab8 	bl	8001764 <DMA_CalcBaseAndBitshift>
 80011f4:	4603      	mov	r3, r0
 80011f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fc:	223f      	movs	r2, #63	; 0x3f
 80011fe:	409a      	lsls	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	f010803f 	.word	0xf010803f

08001220 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800123e:	2b01      	cmp	r3, #1
 8001240:	d101      	bne.n	8001246 <HAL_DMA_Start_IT+0x26>
 8001242:	2302      	movs	r3, #2
 8001244:	e040      	b.n	80012c8 <HAL_DMA_Start_IT+0xa8>
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2201      	movs	r2, #1
 800124a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b01      	cmp	r3, #1
 8001258:	d12f      	bne.n	80012ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2202      	movs	r2, #2
 800125e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2200      	movs	r2, #0
 8001266:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f000 fa4a 	bl	8001708 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001278:	223f      	movs	r2, #63	; 0x3f
 800127a:	409a      	lsls	r2, r3
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 0216 	orr.w	r2, r2, #22
 800128e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	2b00      	cmp	r3, #0
 8001296:	d007      	beq.n	80012a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0208 	orr.w	r2, r2, #8
 80012a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0201 	orr.w	r2, r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	e005      	b.n	80012c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012c2:	2302      	movs	r3, #2
 80012c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012de:	f7ff fdd3 	bl	8000e88 <HAL_GetTick>
 80012e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d008      	beq.n	8001302 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e052      	b.n	80013a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0216 	bic.w	r2, r2, #22
 8001310:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	695a      	ldr	r2, [r3, #20]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001320:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	2b00      	cmp	r3, #0
 8001328:	d103      	bne.n	8001332 <HAL_DMA_Abort+0x62>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0208 	bic.w	r2, r2, #8
 8001340:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001352:	e013      	b.n	800137c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001354:	f7ff fd98 	bl	8000e88 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b05      	cmp	r3, #5
 8001360:	d90c      	bls.n	800137c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2220      	movs	r2, #32
 8001366:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2203      	movs	r2, #3
 8001374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e015      	b.n	80013a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1e4      	bne.n	8001354 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138e:	223f      	movs	r2, #63	; 0x3f
 8001390:	409a      	lsls	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d004      	beq.n	80013ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2280      	movs	r2, #128	; 0x80
 80013c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00c      	b.n	80013e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2205      	movs	r2, #5
 80013d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0201 	bic.w	r2, r2, #1
 80013e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001400:	4b92      	ldr	r3, [pc, #584]	; (800164c <HAL_DMA_IRQHandler+0x258>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a92      	ldr	r2, [pc, #584]	; (8001650 <HAL_DMA_IRQHandler+0x25c>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0a9b      	lsrs	r3, r3, #10
 800140c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141e:	2208      	movs	r2, #8
 8001420:	409a      	lsls	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4013      	ands	r3, r2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d01a      	beq.n	8001460 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0204 	bic.w	r2, r2, #4
 8001446:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144c:	2208      	movs	r2, #8
 800144e:	409a      	lsls	r2, r3
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001458:	f043 0201 	orr.w	r2, r3, #1
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001464:	2201      	movs	r2, #1
 8001466:	409a      	lsls	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4013      	ands	r3, r2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d012      	beq.n	8001496 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00b      	beq.n	8001496 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001482:	2201      	movs	r2, #1
 8001484:	409a      	lsls	r2, r3
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148e:	f043 0202 	orr.w	r2, r3, #2
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149a:	2204      	movs	r2, #4
 800149c:	409a      	lsls	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d012      	beq.n	80014cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00b      	beq.n	80014cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b8:	2204      	movs	r2, #4
 80014ba:	409a      	lsls	r2, r3
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c4:	f043 0204 	orr.w	r2, r3, #4
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d0:	2210      	movs	r2, #16
 80014d2:	409a      	lsls	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d043      	beq.n	8001564 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d03c      	beq.n	8001564 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ee:	2210      	movs	r2, #16
 80014f0:	409a      	lsls	r2, r3
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d018      	beq.n	8001536 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d108      	bne.n	8001524 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d024      	beq.n	8001564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	4798      	blx	r3
 8001522:	e01f      	b.n	8001564 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001528:	2b00      	cmp	r3, #0
 800152a:	d01b      	beq.n	8001564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	4798      	blx	r3
 8001534:	e016      	b.n	8001564 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	2b00      	cmp	r3, #0
 8001542:	d107      	bne.n	8001554 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0208 	bic.w	r2, r2, #8
 8001552:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001568:	2220      	movs	r2, #32
 800156a:	409a      	lsls	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 808e 	beq.w	8001692 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 8086 	beq.w	8001692 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158a:	2220      	movs	r2, #32
 800158c:	409a      	lsls	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b05      	cmp	r3, #5
 800159c:	d136      	bne.n	800160c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0216 	bic.w	r2, r2, #22
 80015ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	695a      	ldr	r2, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d103      	bne.n	80015ce <HAL_DMA_IRQHandler+0x1da>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d007      	beq.n	80015de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0208 	bic.w	r2, r2, #8
 80015dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e2:	223f      	movs	r2, #63	; 0x3f
 80015e4:	409a      	lsls	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d07d      	beq.n	80016fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	4798      	blx	r3
        }
        return;
 800160a:	e078      	b.n	80016fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d01c      	beq.n	8001654 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d108      	bne.n	800163a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162c:	2b00      	cmp	r3, #0
 800162e:	d030      	beq.n	8001692 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	4798      	blx	r3
 8001638:	e02b      	b.n	8001692 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163e:	2b00      	cmp	r3, #0
 8001640:	d027      	beq.n	8001692 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	4798      	blx	r3
 800164a:	e022      	b.n	8001692 <HAL_DMA_IRQHandler+0x29e>
 800164c:	20000000 	.word	0x20000000
 8001650:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10f      	bne.n	8001682 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0210 	bic.w	r2, r2, #16
 8001670:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001696:	2b00      	cmp	r3, #0
 8001698:	d032      	beq.n	8001700 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d022      	beq.n	80016ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2205      	movs	r2, #5
 80016aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0201 	bic.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3301      	adds	r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d307      	bcc.n	80016da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f2      	bne.n	80016be <HAL_DMA_IRQHandler+0x2ca>
 80016d8:	e000      	b.n	80016dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80016da:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	4798      	blx	r3
 80016fc:	e000      	b.n	8001700 <HAL_DMA_IRQHandler+0x30c>
        return;
 80016fe:	bf00      	nop
    }
  }
}
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop

08001708 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001724:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b40      	cmp	r3, #64	; 0x40
 8001734:	d108      	bne.n	8001748 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001746:	e007      	b.n	8001758 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	60da      	str	r2, [r3, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	3b10      	subs	r3, #16
 8001774:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <DMA_CalcBaseAndBitshift+0x64>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800177e:	4a13      	ldr	r2, [pc, #76]	; (80017cc <DMA_CalcBaseAndBitshift+0x68>)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b03      	cmp	r3, #3
 8001790:	d909      	bls.n	80017a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800179a:	f023 0303 	bic.w	r3, r3, #3
 800179e:	1d1a      	adds	r2, r3, #4
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	659a      	str	r2, [r3, #88]	; 0x58
 80017a4:	e007      	b.n	80017b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017ae:	f023 0303 	bic.w	r3, r3, #3
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	aaaaaaab 	.word	0xaaaaaaab
 80017cc:	08003ed4 	.word	0x08003ed4

080017d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d11f      	bne.n	800182a <DMA_CheckFifoParam+0x5a>
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d856      	bhi.n	800189e <DMA_CheckFifoParam+0xce>
 80017f0:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <DMA_CheckFifoParam+0x28>)
 80017f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f6:	bf00      	nop
 80017f8:	08001809 	.word	0x08001809
 80017fc:	0800181b 	.word	0x0800181b
 8001800:	08001809 	.word	0x08001809
 8001804:	0800189f 	.word	0x0800189f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d046      	beq.n	80018a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001818:	e043      	b.n	80018a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001822:	d140      	bne.n	80018a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001828:	e03d      	b.n	80018a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001832:	d121      	bne.n	8001878 <DMA_CheckFifoParam+0xa8>
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b03      	cmp	r3, #3
 8001838:	d837      	bhi.n	80018aa <DMA_CheckFifoParam+0xda>
 800183a:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <DMA_CheckFifoParam+0x70>)
 800183c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001840:	08001851 	.word	0x08001851
 8001844:	08001857 	.word	0x08001857
 8001848:	08001851 	.word	0x08001851
 800184c:	08001869 	.word	0x08001869
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
      break;
 8001854:	e030      	b.n	80018b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d025      	beq.n	80018ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001866:	e022      	b.n	80018ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001870:	d11f      	bne.n	80018b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001876:	e01c      	b.n	80018b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d903      	bls.n	8001886 <DMA_CheckFifoParam+0xb6>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b03      	cmp	r3, #3
 8001882:	d003      	beq.n	800188c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001884:	e018      	b.n	80018b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
      break;
 800188a:	e015      	b.n	80018b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00e      	beq.n	80018b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
      break;
 800189c:	e00b      	b.n	80018b6 <DMA_CheckFifoParam+0xe6>
      break;
 800189e:	bf00      	nop
 80018a0:	e00a      	b.n	80018b8 <DMA_CheckFifoParam+0xe8>
      break;
 80018a2:	bf00      	nop
 80018a4:	e008      	b.n	80018b8 <DMA_CheckFifoParam+0xe8>
      break;
 80018a6:	bf00      	nop
 80018a8:	e006      	b.n	80018b8 <DMA_CheckFifoParam+0xe8>
      break;
 80018aa:	bf00      	nop
 80018ac:	e004      	b.n	80018b8 <DMA_CheckFifoParam+0xe8>
      break;
 80018ae:	bf00      	nop
 80018b0:	e002      	b.n	80018b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80018b2:	bf00      	nop
 80018b4:	e000      	b.n	80018b8 <DMA_CheckFifoParam+0xe8>
      break;
 80018b6:	bf00      	nop
    }
  } 
  
  return status; 
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop

080018c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	e159      	b.n	8001b98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018e4:	2201      	movs	r2, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	f040 8148 	bne.w	8001b92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	2b01      	cmp	r3, #1
 800190c:	d005      	beq.n	800191a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001916:	2b02      	cmp	r3, #2
 8001918:	d130      	bne.n	800197c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001950:	2201      	movs	r2, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 0201 	and.w	r2, r3, #1
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b03      	cmp	r3, #3
 8001986:	d017      	beq.n	80019b8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d123      	bne.n	8001a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3208      	adds	r2, #8
 80019cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	220f      	movs	r2, #15
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	08da      	lsrs	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3208      	adds	r2, #8
 8001a06:	69b9      	ldr	r1, [r7, #24]
 8001a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0203 	and.w	r2, r3, #3
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80a2 	beq.w	8001b92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b57      	ldr	r3, [pc, #348]	; (8001bb0 <HAL_GPIO_Init+0x2e8>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a56      	ldr	r2, [pc, #344]	; (8001bb0 <HAL_GPIO_Init+0x2e8>)
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b54      	ldr	r3, [pc, #336]	; (8001bb0 <HAL_GPIO_Init+0x2e8>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a6a:	4a52      	ldr	r2, [pc, #328]	; (8001bb4 <HAL_GPIO_Init+0x2ec>)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	3302      	adds	r3, #2
 8001a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	220f      	movs	r2, #15
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a49      	ldr	r2, [pc, #292]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d019      	beq.n	8001aca <HAL_GPIO_Init+0x202>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a48      	ldr	r2, [pc, #288]	; (8001bbc <HAL_GPIO_Init+0x2f4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_GPIO_Init+0x1fe>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a47      	ldr	r2, [pc, #284]	; (8001bc0 <HAL_GPIO_Init+0x2f8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00d      	beq.n	8001ac2 <HAL_GPIO_Init+0x1fa>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a46      	ldr	r2, [pc, #280]	; (8001bc4 <HAL_GPIO_Init+0x2fc>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d007      	beq.n	8001abe <HAL_GPIO_Init+0x1f6>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a45      	ldr	r2, [pc, #276]	; (8001bc8 <HAL_GPIO_Init+0x300>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_GPIO_Init+0x1f2>
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	e008      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001aba:	2307      	movs	r3, #7
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e004      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001aca:	2300      	movs	r3, #0
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	f002 0203 	and.w	r2, r2, #3
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	4093      	lsls	r3, r2
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001adc:	4935      	ldr	r1, [pc, #212]	; (8001bb4 <HAL_GPIO_Init+0x2ec>)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aea:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b0e:	4a2f      	ldr	r2, [pc, #188]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b14:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b38:	4a24      	ldr	r2, [pc, #144]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3e:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b62:	4a1a      	ldr	r2, [pc, #104]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b8c:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b0f      	cmp	r3, #15
 8001b9c:	f67f aea2 	bls.w	80018e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3724      	adds	r7, #36	; 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40013800 	.word	0x40013800
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40020c00 	.word	0x40020c00
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40013c00 	.word	0x40013c00

08001bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be0:	787b      	ldrb	r3, [r7, #1]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bec:	e003      	b.n	8001bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bee:	887b      	ldrh	r3, [r7, #2]
 8001bf0:	041a      	lsls	r2, r3, #16
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	619a      	str	r2, [r3, #24]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e264      	b.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d075      	beq.n	8001d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c22:	4ba3      	ldr	r3, [pc, #652]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d00c      	beq.n	8001c48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2e:	4ba0      	ldr	r3, [pc, #640]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d112      	bne.n	8001c60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c3a:	4b9d      	ldr	r3, [pc, #628]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c46:	d10b      	bne.n	8001c60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c48:	4b99      	ldr	r3, [pc, #612]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d05b      	beq.n	8001d0c <HAL_RCC_OscConfig+0x108>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d157      	bne.n	8001d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e23f      	b.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c68:	d106      	bne.n	8001c78 <HAL_RCC_OscConfig+0x74>
 8001c6a:	4b91      	ldr	r3, [pc, #580]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a90      	ldr	r2, [pc, #576]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e01d      	b.n	8001cb4 <HAL_RCC_OscConfig+0xb0>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x98>
 8001c82:	4b8b      	ldr	r3, [pc, #556]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a8a      	ldr	r2, [pc, #552]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b88      	ldr	r3, [pc, #544]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a87      	ldr	r2, [pc, #540]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0xb0>
 8001c9c:	4b84      	ldr	r3, [pc, #528]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a83      	ldr	r2, [pc, #524]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b81      	ldr	r3, [pc, #516]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a80      	ldr	r2, [pc, #512]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d013      	beq.n	8001ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7ff f8e4 	bl	8000e88 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff f8e0 	bl	8000e88 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e204      	b.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	4b76      	ldr	r3, [pc, #472]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xc0>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f8d0 	bl	8000e88 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff f8cc 	bl	8000e88 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1f0      	b.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfe:	4b6c      	ldr	r3, [pc, #432]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0xe8>
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d063      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d1a:	4b65      	ldr	r3, [pc, #404]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d26:	4b62      	ldr	r3, [pc, #392]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d11c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d32:	4b5f      	ldr	r3, [pc, #380]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d116      	bne.n	8001d6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	4b5c      	ldr	r3, [pc, #368]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_RCC_OscConfig+0x152>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e1c4      	b.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	4b56      	ldr	r3, [pc, #344]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4952      	ldr	r1, [pc, #328]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6a:	e03a      	b.n	8001de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d020      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d74:	4b4f      	ldr	r3, [pc, #316]	; (8001eb4 <HAL_RCC_OscConfig+0x2b0>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7a:	f7ff f885 	bl	8000e88 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d82:	f7ff f881 	bl	8000e88 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e1a5      	b.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b43      	ldr	r3, [pc, #268]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4940      	ldr	r1, [pc, #256]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]
 8001db4:	e015      	b.n	8001de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db6:	4b3f      	ldr	r3, [pc, #252]	; (8001eb4 <HAL_RCC_OscConfig+0x2b0>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff f864 	bl	8000e88 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc4:	f7ff f860 	bl	8000e88 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e184      	b.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd6:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d030      	beq.n	8001e50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d016      	beq.n	8001e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df6:	4b30      	ldr	r3, [pc, #192]	; (8001eb8 <HAL_RCC_OscConfig+0x2b4>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7ff f844 	bl	8000e88 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e04:	f7ff f840 	bl	8000e88 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e164      	b.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e16:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x200>
 8001e22:	e015      	b.n	8001e50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e24:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <HAL_RCC_OscConfig+0x2b4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2a:	f7ff f82d 	bl	8000e88 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e32:	f7ff f829 	bl	8000e88 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e14d      	b.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e44:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f0      	bne.n	8001e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a0 	beq.w	8001f9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10f      	bne.n	8001e8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_RCC_OscConfig+0x2ac>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_OscConfig+0x2b8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d121      	bne.n	8001ede <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_RCC_OscConfig+0x2b8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <HAL_RCC_OscConfig+0x2b8>)
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea6:	f7fe ffef 	bl	8000e88 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	e011      	b.n	8001ed2 <HAL_RCC_OscConfig+0x2ce>
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	42470000 	.word	0x42470000
 8001eb8:	42470e80 	.word	0x42470e80
 8001ebc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec0:	f7fe ffe2 	bl	8000e88 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e106      	b.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b85      	ldr	r3, [pc, #532]	; (80020e8 <HAL_RCC_OscConfig+0x4e4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d106      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x2f0>
 8001ee6:	4b81      	ldr	r3, [pc, #516]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	4a80      	ldr	r2, [pc, #512]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef2:	e01c      	b.n	8001f2e <HAL_RCC_OscConfig+0x32a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b05      	cmp	r3, #5
 8001efa:	d10c      	bne.n	8001f16 <HAL_RCC_OscConfig+0x312>
 8001efc:	4b7b      	ldr	r3, [pc, #492]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f00:	4a7a      	ldr	r2, [pc, #488]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 8001f02:	f043 0304 	orr.w	r3, r3, #4
 8001f06:	6713      	str	r3, [r2, #112]	; 0x70
 8001f08:	4b78      	ldr	r3, [pc, #480]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 8001f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0c:	4a77      	ldr	r2, [pc, #476]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6713      	str	r3, [r2, #112]	; 0x70
 8001f14:	e00b      	b.n	8001f2e <HAL_RCC_OscConfig+0x32a>
 8001f16:	4b75      	ldr	r3, [pc, #468]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1a:	4a74      	ldr	r2, [pc, #464]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6713      	str	r3, [r2, #112]	; 0x70
 8001f22:	4b72      	ldr	r3, [pc, #456]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f26:	4a71      	ldr	r2, [pc, #452]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 8001f28:	f023 0304 	bic.w	r3, r3, #4
 8001f2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d015      	beq.n	8001f62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f36:	f7fe ffa7 	bl	8000e88 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f7fe ffa3 	bl	8000e88 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e0c5      	b.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f54:	4b65      	ldr	r3, [pc, #404]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0ee      	beq.n	8001f3e <HAL_RCC_OscConfig+0x33a>
 8001f60:	e014      	b.n	8001f8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f62:	f7fe ff91 	bl	8000e88 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7fe ff8d 	bl	8000e88 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e0af      	b.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f80:	4b5a      	ldr	r3, [pc, #360]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1ee      	bne.n	8001f6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d105      	bne.n	8001f9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f92:	4b56      	ldr	r3, [pc, #344]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	4a55      	ldr	r2, [pc, #340]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 8001f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 809b 	beq.w	80020de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fa8:	4b50      	ldr	r3, [pc, #320]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 030c 	and.w	r3, r3, #12
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d05c      	beq.n	800206e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d141      	bne.n	8002040 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbc:	4b4c      	ldr	r3, [pc, #304]	; (80020f0 <HAL_RCC_OscConfig+0x4ec>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc2:	f7fe ff61 	bl	8000e88 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fca:	f7fe ff5d 	bl	8000e88 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e081      	b.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fdc:	4b43      	ldr	r3, [pc, #268]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f0      	bne.n	8001fca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69da      	ldr	r2, [r3, #28]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	019b      	lsls	r3, r3, #6
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	085b      	lsrs	r3, r3, #1
 8002000:	3b01      	subs	r3, #1
 8002002:	041b      	lsls	r3, r3, #16
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	061b      	lsls	r3, r3, #24
 800200c:	4937      	ldr	r1, [pc, #220]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002012:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <HAL_RCC_OscConfig+0x4ec>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7fe ff36 	bl	8000e88 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002020:	f7fe ff32 	bl	8000e88 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e056      	b.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002032:	4b2e      	ldr	r3, [pc, #184]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x41c>
 800203e:	e04e      	b.n	80020de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002040:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <HAL_RCC_OscConfig+0x4ec>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7fe ff1f 	bl	8000e88 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204e:	f7fe ff1b 	bl	8000e88 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e03f      	b.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002060:	4b22      	ldr	r3, [pc, #136]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f0      	bne.n	800204e <HAL_RCC_OscConfig+0x44a>
 800206c:	e037      	b.n	80020de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e032      	b.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_RCC_OscConfig+0x4e8>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d028      	beq.n	80020da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002092:	429a      	cmp	r2, r3
 8002094:	d121      	bne.n	80020da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d11a      	bne.n	80020da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020aa:	4013      	ands	r3, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d111      	bne.n	80020da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	085b      	lsrs	r3, r3, #1
 80020c2:	3b01      	subs	r3, #1
 80020c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d107      	bne.n	80020da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40007000 	.word	0x40007000
 80020ec:	40023800 	.word	0x40023800
 80020f0:	42470060 	.word	0x42470060

080020f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0cc      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002108:	4b68      	ldr	r3, [pc, #416]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d90c      	bls.n	8002130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	4b65      	ldr	r3, [pc, #404]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b63      	ldr	r3, [pc, #396]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b8      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a58      	ldr	r2, [pc, #352]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800216a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	494d      	ldr	r1, [pc, #308]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	4313      	orrs	r3, r2
 800217c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d044      	beq.n	8002214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d119      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d003      	beq.n	80021b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b2:	4b3f      	ldr	r3, [pc, #252]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e06f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c2:	4b3b      	ldr	r3, [pc, #236]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e067      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d2:	4b37      	ldr	r3, [pc, #220]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f023 0203 	bic.w	r2, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4934      	ldr	r1, [pc, #208]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e4:	f7fe fe50 	bl	8000e88 <HAL_GetTick>
 80021e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ec:	f7fe fe4c 	bl	8000e88 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e04f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 020c 	and.w	r2, r3, #12
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	429a      	cmp	r2, r3
 8002212:	d1eb      	bne.n	80021ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002214:	4b25      	ldr	r3, [pc, #148]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d20c      	bcs.n	800223c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b22      	ldr	r3, [pc, #136]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e032      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4916      	ldr	r1, [pc, #88]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	490e      	ldr	r1, [pc, #56]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800227a:	f000 f821 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 800227e:	4602      	mov	r2, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	490a      	ldr	r1, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	5ccb      	ldrb	r3, [r1, r3]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fdb0 	bl	8000e00 <HAL_InitTick>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023c00 	.word	0x40023c00
 80022b0:	40023800 	.word	0x40023800
 80022b4:	08003ebc 	.word	0x08003ebc
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000004 	.word	0x20000004

080022c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022c4:	b084      	sub	sp, #16
 80022c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	2300      	movs	r3, #0
 80022d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d8:	4b67      	ldr	r3, [pc, #412]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d00d      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x40>
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	f200 80bd 	bhi.w	8002464 <HAL_RCC_GetSysClockFreq+0x1a4>
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <HAL_RCC_GetSysClockFreq+0x34>
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d003      	beq.n	80022fa <HAL_RCC_GetSysClockFreq+0x3a>
 80022f2:	e0b7      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f4:	4b61      	ldr	r3, [pc, #388]	; (800247c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80022f6:	60bb      	str	r3, [r7, #8]
       break;
 80022f8:	e0b7      	b.n	800246a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022fa:	4b61      	ldr	r3, [pc, #388]	; (8002480 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80022fc:	60bb      	str	r3, [r7, #8]
      break;
 80022fe:	e0b4      	b.n	800246a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002300:	4b5d      	ldr	r3, [pc, #372]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002308:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800230a:	4b5b      	ldr	r3, [pc, #364]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d04d      	beq.n	80023b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002316:	4b58      	ldr	r3, [pc, #352]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	099b      	lsrs	r3, r3, #6
 800231c:	461a      	mov	r2, r3
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002326:	f04f 0100 	mov.w	r1, #0
 800232a:	ea02 0800 	and.w	r8, r2, r0
 800232e:	ea03 0901 	and.w	r9, r3, r1
 8002332:	4640      	mov	r0, r8
 8002334:	4649      	mov	r1, r9
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	014b      	lsls	r3, r1, #5
 8002340:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002344:	0142      	lsls	r2, r0, #5
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	ebb0 0008 	subs.w	r0, r0, r8
 800234e:	eb61 0109 	sbc.w	r1, r1, r9
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	018b      	lsls	r3, r1, #6
 800235c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002360:	0182      	lsls	r2, r0, #6
 8002362:	1a12      	subs	r2, r2, r0
 8002364:	eb63 0301 	sbc.w	r3, r3, r1
 8002368:	f04f 0000 	mov.w	r0, #0
 800236c:	f04f 0100 	mov.w	r1, #0
 8002370:	00d9      	lsls	r1, r3, #3
 8002372:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002376:	00d0      	lsls	r0, r2, #3
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	eb12 0208 	adds.w	r2, r2, r8
 8002380:	eb43 0309 	adc.w	r3, r3, r9
 8002384:	f04f 0000 	mov.w	r0, #0
 8002388:	f04f 0100 	mov.w	r1, #0
 800238c:	0259      	lsls	r1, r3, #9
 800238e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002392:	0250      	lsls	r0, r2, #9
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4610      	mov	r0, r2
 800239a:	4619      	mov	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	461a      	mov	r2, r3
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	f7fd ff74 	bl	8000290 <__aeabi_uldivmod>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4613      	mov	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	e04a      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b2:	4b31      	ldr	r3, [pc, #196]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	099b      	lsrs	r3, r3, #6
 80023b8:	461a      	mov	r2, r3
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023c2:	f04f 0100 	mov.w	r1, #0
 80023c6:	ea02 0400 	and.w	r4, r2, r0
 80023ca:	ea03 0501 	and.w	r5, r3, r1
 80023ce:	4620      	mov	r0, r4
 80023d0:	4629      	mov	r1, r5
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	014b      	lsls	r3, r1, #5
 80023dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023e0:	0142      	lsls	r2, r0, #5
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	1b00      	subs	r0, r0, r4
 80023e8:	eb61 0105 	sbc.w	r1, r1, r5
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	018b      	lsls	r3, r1, #6
 80023f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023fa:	0182      	lsls	r2, r0, #6
 80023fc:	1a12      	subs	r2, r2, r0
 80023fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002402:	f04f 0000 	mov.w	r0, #0
 8002406:	f04f 0100 	mov.w	r1, #0
 800240a:	00d9      	lsls	r1, r3, #3
 800240c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002410:	00d0      	lsls	r0, r2, #3
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	1912      	adds	r2, r2, r4
 8002418:	eb45 0303 	adc.w	r3, r5, r3
 800241c:	f04f 0000 	mov.w	r0, #0
 8002420:	f04f 0100 	mov.w	r1, #0
 8002424:	0299      	lsls	r1, r3, #10
 8002426:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800242a:	0290      	lsls	r0, r2, #10
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	461a      	mov	r2, r3
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	f7fd ff28 	bl	8000290 <__aeabi_uldivmod>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4613      	mov	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	0c1b      	lsrs	r3, r3, #16
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	3301      	adds	r3, #1
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002460:	60bb      	str	r3, [r7, #8]
      break;
 8002462:	e002      	b.n	800246a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002466:	60bb      	str	r3, [r7, #8]
      break;
 8002468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800246a:	68bb      	ldr	r3, [r7, #8]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	00f42400 	.word	0x00f42400
 8002480:	007a1200 	.word	0x007a1200

08002484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_RCC_GetHCLKFreq+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000000 	.word	0x20000000

0800249c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024a0:	f7ff fff0 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	0a9b      	lsrs	r3, r3, #10
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	4903      	ldr	r1, [pc, #12]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40023800 	.word	0x40023800
 80024c0:	08003ecc 	.word	0x08003ecc

080024c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024c8:	f7ff ffdc 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	0b5b      	lsrs	r3, r3, #13
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	4903      	ldr	r1, [pc, #12]	; (80024e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024da:	5ccb      	ldrb	r3, [r1, r3]
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40023800 	.word	0x40023800
 80024e8:	08003ecc 	.word	0x08003ecc

080024ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e03f      	b.n	800257e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fe fae2 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2224      	movs	r2, #36	; 0x24
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800252e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fd51 	bl	8002fd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695a      	ldr	r2, [r3, #20]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	4613      	mov	r3, r2
 8002594:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d153      	bne.n	800264a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <HAL_UART_Transmit_DMA+0x26>
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e04c      	b.n	800264c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_UART_Transmit_DMA+0x38>
 80025bc:	2302      	movs	r3, #2
 80025be:	e045      	b.n	800264c <HAL_UART_Transmit_DMA+0xc4>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	88fa      	ldrh	r2, [r7, #6]
 80025d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	88fa      	ldrh	r2, [r7, #6]
 80025d8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2221      	movs	r2, #33	; 0x21
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ec:	4a19      	ldr	r2, [pc, #100]	; (8002654 <HAL_UART_Transmit_DMA+0xcc>)
 80025ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f4:	4a18      	ldr	r2, [pc, #96]	; (8002658 <HAL_UART_Transmit_DMA+0xd0>)
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fc:	4a17      	ldr	r2, [pc, #92]	; (800265c <HAL_UART_Transmit_DMA+0xd4>)
 80025fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002604:	2200      	movs	r2, #0
 8002606:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8002608:	f107 0308 	add.w	r3, r7, #8
 800260c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	6819      	ldr	r1, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	3304      	adds	r3, #4
 800261c:	461a      	mov	r2, r3
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	f7fe fdfe 	bl	8001220 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800262c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002644:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	e000      	b.n	800264c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800264a:	2302      	movs	r3, #2
  }
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	08002a95 	.word	0x08002a95
 8002658:	08002ae7 	.word	0x08002ae7
 800265c:	08002bcf 	.word	0x08002bcf

08002660 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	4613      	mov	r3, r2
 800266c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b20      	cmp	r3, #32
 8002678:	d11d      	bne.n	80026b6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <HAL_UART_Receive_DMA+0x26>
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e016      	b.n	80026b8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_UART_Receive_DMA+0x38>
 8002694:	2302      	movs	r3, #2
 8002696:	e00f      	b.n	80026b8 <HAL_UART_Receive_DMA+0x58>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	461a      	mov	r2, r3
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fad9 	bl	8002c64 <UART_Start_Receive_DMA>
 80026b2:	4603      	mov	r3, r0
 80026b4:	e000      	b.n	80026b8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80026b6:	2302      	movs	r3, #2
  }
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10d      	bne.n	8002712 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_UART_IRQHandler+0x52>
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fbcd 	bl	8002eaa <UART_Receive_IT>
      return;
 8002710:	e17c      	b.n	8002a0c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80b1 	beq.w	800287c <HAL_UART_IRQHandler+0x1bc>
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <HAL_UART_IRQHandler+0x70>
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80a6 	beq.w	800287c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <HAL_UART_IRQHandler+0x90>
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_UART_IRQHandler+0xb0>
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f043 0202 	orr.w	r2, r3, #2
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_UART_IRQHandler+0xd0>
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	f043 0204 	orr.w	r2, r3, #4
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00f      	beq.n	80027ba <HAL_UART_IRQHandler+0xfa>
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d104      	bne.n	80027ae <HAL_UART_IRQHandler+0xee>
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d005      	beq.n	80027ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f043 0208 	orr.w	r2, r3, #8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 811f 	beq.w	8002a02 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <HAL_UART_IRQHandler+0x11e>
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fb66 	bl	8002eaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d102      	bne.n	8002806 <HAL_UART_IRQHandler+0x146>
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d031      	beq.n	800286a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 faa6 	bl	8002d58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002816:	2b40      	cmp	r3, #64	; 0x40
 8002818:	d123      	bne.n	8002862 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695a      	ldr	r2, [r3, #20]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002828:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282e:	2b00      	cmp	r3, #0
 8002830:	d013      	beq.n	800285a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002836:	4a77      	ldr	r2, [pc, #476]	; (8002a14 <HAL_UART_IRQHandler+0x354>)
 8002838:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fdb6 	bl	80013b0 <HAL_DMA_Abort_IT>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d016      	beq.n	8002878 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002854:	4610      	mov	r0, r2
 8002856:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002858:	e00e      	b.n	8002878 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f904 	bl	8002a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002860:	e00a      	b.n	8002878 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f900 	bl	8002a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002868:	e006      	b.n	8002878 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f8fc 	bl	8002a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002876:	e0c4      	b.n	8002a02 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002878:	bf00      	nop
    return;
 800287a:	e0c2      	b.n	8002a02 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	2b01      	cmp	r3, #1
 8002882:	f040 80a2 	bne.w	80029ca <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	f003 0310 	and.w	r3, r3, #16
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 809c 	beq.w	80029ca <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 8096 	beq.w	80029ca <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028be:	2b40      	cmp	r3, #64	; 0x40
 80028c0:	d14f      	bne.n	8002962 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80028cc:	8a3b      	ldrh	r3, [r7, #16]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8099 	beq.w	8002a06 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028d8:	8a3a      	ldrh	r2, [r7, #16]
 80028da:	429a      	cmp	r2, r3
 80028dc:	f080 8093 	bcs.w	8002a06 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	8a3a      	ldrh	r2, [r7, #16]
 80028e4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f0:	d02b      	beq.n	800294a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002900:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0201 	bic.w	r2, r2, #1
 8002910:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002920:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0210 	bic.w	r2, r2, #16
 800293e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe fcc3 	bl	80012d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002952:	b29b      	uxth	r3, r3
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	b29b      	uxth	r3, r3
 8002958:	4619      	mov	r1, r3
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f88e 	bl	8002a7c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002960:	e051      	b.n	8002a06 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800296a:	b29b      	uxth	r3, r3
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d047      	beq.n	8002a0a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800297a:	8a7b      	ldrh	r3, [r7, #18]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d044      	beq.n	8002a0a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800298e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0210 	bic.w	r2, r2, #16
 80029bc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029be:	8a7b      	ldrh	r3, [r7, #18]
 80029c0:	4619      	mov	r1, r3
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f85a 	bl	8002a7c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80029c8:	e01f      	b.n	8002a0a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_UART_IRQHandler+0x326>
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f9fb 	bl	8002dda <UART_Transmit_IT>
    return;
 80029e4:	e012      	b.n	8002a0c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00d      	beq.n	8002a0c <HAL_UART_IRQHandler+0x34c>
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fa3d 	bl	8002e7a <UART_EndTransmit_IT>
    return;
 8002a00:	e004      	b.n	8002a0c <HAL_UART_IRQHandler+0x34c>
    return;
 8002a02:	bf00      	nop
 8002a04:	e002      	b.n	8002a0c <HAL_UART_IRQHandler+0x34c>
      return;
 8002a06:	bf00      	nop
 8002a08:	e000      	b.n	8002a0c <HAL_UART_IRQHandler+0x34c>
      return;
 8002a0a:	bf00      	nop
  }
}
 8002a0c:	3728      	adds	r7, #40	; 0x28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	08002db3 	.word	0x08002db3

08002a18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d113      	bne.n	8002ad8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ac4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ad4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ad6:	e002      	b.n	8002ade <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f7ff ff9d 	bl	8002a18 <HAL_UART_TxCpltCallback>
}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f7ff ff99 	bl	8002a2c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d12a      	bne.n	8002b74 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b32:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0201 	bic.w	r2, r2, #1
 8002b42:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b52:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d107      	bne.n	8002b74 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0210 	bic.w	r2, r2, #16
 8002b72:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d106      	bne.n	8002b8a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b80:	4619      	mov	r1, r3
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f7ff ff7a 	bl	8002a7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b88:	e002      	b.n	8002b90 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f7ff ff58 	bl	8002a40 <HAL_UART_RxCpltCallback>
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d108      	bne.n	8002bc0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bb2:	085b      	lsrs	r3, r3, #1
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f7ff ff5f 	bl	8002a7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002bbe:	e002      	b.n	8002bc6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f7ff ff47 	bl	8002a54 <HAL_UART_RxHalfCpltCallback>
}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	2b80      	cmp	r3, #128	; 0x80
 8002bec:	bf0c      	ite	eq
 8002bee:	2301      	moveq	r3, #1
 8002bf0:	2300      	movne	r3, #0
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b21      	cmp	r3, #33	; 0x21
 8002c00:	d108      	bne.n	8002c14 <UART_DMAError+0x46>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002c0e:	68b8      	ldr	r0, [r7, #8]
 8002c10:	f000 f88c 	bl	8002d2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	bf0c      	ite	eq
 8002c22:	2301      	moveq	r3, #1
 8002c24:	2300      	movne	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b22      	cmp	r3, #34	; 0x22
 8002c34:	d108      	bne.n	8002c48 <UART_DMAError+0x7a>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002c42:	68b8      	ldr	r0, [r7, #8]
 8002c44:	f000 f888 	bl	8002d58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	f043 0210 	orr.w	r2, r3, #16
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c54:	68b8      	ldr	r0, [r7, #8]
 8002c56:	f7ff ff07 	bl	8002a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	88fa      	ldrh	r2, [r7, #6]
 8002c7c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2222      	movs	r2, #34	; 0x22
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	4a23      	ldr	r2, [pc, #140]	; (8002d20 <UART_Start_Receive_DMA+0xbc>)
 8002c92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c98:	4a22      	ldr	r2, [pc, #136]	; (8002d24 <UART_Start_Receive_DMA+0xc0>)
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <UART_Start_Receive_DMA+0xc4>)
 8002ca2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	2200      	movs	r2, #0
 8002caa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002cac:	f107 0308 	add.w	r3, r7, #8
 8002cb0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3304      	adds	r3, #4
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	f7fe faac 	bl	8001220 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002cc8:	2300      	movs	r3, #0
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0201 	orr.w	r2, r2, #1
 8002d04:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d14:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	08002b03 	.word	0x08002b03
 8002d24:	08002b99 	.word	0x08002b99
 8002d28:	08002bcf 	.word	0x08002bcf

08002d2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002d42:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d6e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695a      	ldr	r2, [r3, #20]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d107      	bne.n	8002d98 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0210 	bic.w	r2, r2, #16
 8002d96:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff fe4b 	bl	8002a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b085      	sub	sp, #20
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b21      	cmp	r3, #33	; 0x21
 8002dec:	d13e      	bne.n	8002e6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df6:	d114      	bne.n	8002e22 <UART_Transmit_IT+0x48>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d110      	bne.n	8002e22 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	1c9a      	adds	r2, r3, #2
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	621a      	str	r2, [r3, #32]
 8002e20:	e008      	b.n	8002e34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	1c59      	adds	r1, r3, #1
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6211      	str	r1, [r2, #32]
 8002e2c:	781a      	ldrb	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4619      	mov	r1, r3
 8002e42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10f      	bne.n	8002e68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	e000      	b.n	8002e6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e6c:	2302      	movs	r3, #2
  }
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff fdbc 	bl	8002a18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b22      	cmp	r3, #34	; 0x22
 8002ebc:	f040 8087 	bne.w	8002fce <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec8:	d117      	bne.n	8002efa <UART_Receive_IT+0x50>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d113      	bne.n	8002efa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef2:	1c9a      	adds	r2, r3, #2
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ef8:	e026      	b.n	8002f48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0c:	d007      	beq.n	8002f1e <UART_Receive_IT+0x74>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <UART_Receive_IT+0x82>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	e008      	b.n	8002f3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	4619      	mov	r1, r3
 8002f56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d136      	bne.n	8002fca <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0220 	bic.w	r2, r2, #32
 8002f6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0201 	bic.w	r2, r2, #1
 8002f8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d10e      	bne.n	8002fba <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0210 	bic.w	r2, r2, #16
 8002faa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff fd62 	bl	8002a7c <HAL_UARTEx_RxEventCallback>
 8002fb8:	e002      	b.n	8002fc0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff fd40 	bl	8002a40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e002      	b.n	8002fd0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e000      	b.n	8002fd0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002fce:	2302      	movs	r3, #2
  }
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fdc:	b09f      	sub	sp, #124	; 0x7c
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fee:	68d9      	ldr	r1, [r3, #12]
 8002ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	ea40 0301 	orr.w	r3, r0, r1
 8002ff8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	431a      	orrs	r2, r3
 8003004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	431a      	orrs	r2, r3
 800300a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	4313      	orrs	r3, r2
 8003010:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800301c:	f021 010c 	bic.w	r1, r1, #12
 8003020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003026:	430b      	orrs	r3, r1
 8003028:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800302a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003036:	6999      	ldr	r1, [r3, #24]
 8003038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	ea40 0301 	orr.w	r3, r0, r1
 8003040:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4bc5      	ldr	r3, [pc, #788]	; (800335c <UART_SetConfig+0x384>)
 8003048:	429a      	cmp	r2, r3
 800304a:	d004      	beq.n	8003056 <UART_SetConfig+0x7e>
 800304c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4bc3      	ldr	r3, [pc, #780]	; (8003360 <UART_SetConfig+0x388>)
 8003052:	429a      	cmp	r2, r3
 8003054:	d103      	bne.n	800305e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003056:	f7ff fa35 	bl	80024c4 <HAL_RCC_GetPCLK2Freq>
 800305a:	6778      	str	r0, [r7, #116]	; 0x74
 800305c:	e002      	b.n	8003064 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800305e:	f7ff fa1d 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8003062:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800306c:	f040 80b6 	bne.w	80031dc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003072:	461c      	mov	r4, r3
 8003074:	f04f 0500 	mov.w	r5, #0
 8003078:	4622      	mov	r2, r4
 800307a:	462b      	mov	r3, r5
 800307c:	1891      	adds	r1, r2, r2
 800307e:	6439      	str	r1, [r7, #64]	; 0x40
 8003080:	415b      	adcs	r3, r3
 8003082:	647b      	str	r3, [r7, #68]	; 0x44
 8003084:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003088:	1912      	adds	r2, r2, r4
 800308a:	eb45 0303 	adc.w	r3, r5, r3
 800308e:	f04f 0000 	mov.w	r0, #0
 8003092:	f04f 0100 	mov.w	r1, #0
 8003096:	00d9      	lsls	r1, r3, #3
 8003098:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800309c:	00d0      	lsls	r0, r2, #3
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	1911      	adds	r1, r2, r4
 80030a4:	6639      	str	r1, [r7, #96]	; 0x60
 80030a6:	416b      	adcs	r3, r5
 80030a8:	667b      	str	r3, [r7, #100]	; 0x64
 80030aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	461a      	mov	r2, r3
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	1891      	adds	r1, r2, r2
 80030b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80030b8:	415b      	adcs	r3, r3
 80030ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80030c4:	f7fd f8e4 	bl	8000290 <__aeabi_uldivmod>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4ba5      	ldr	r3, [pc, #660]	; (8003364 <UART_SetConfig+0x38c>)
 80030ce:	fba3 2302 	umull	r2, r3, r3, r2
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	011e      	lsls	r6, r3, #4
 80030d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d8:	461c      	mov	r4, r3
 80030da:	f04f 0500 	mov.w	r5, #0
 80030de:	4622      	mov	r2, r4
 80030e0:	462b      	mov	r3, r5
 80030e2:	1891      	adds	r1, r2, r2
 80030e4:	6339      	str	r1, [r7, #48]	; 0x30
 80030e6:	415b      	adcs	r3, r3
 80030e8:	637b      	str	r3, [r7, #52]	; 0x34
 80030ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80030ee:	1912      	adds	r2, r2, r4
 80030f0:	eb45 0303 	adc.w	r3, r5, r3
 80030f4:	f04f 0000 	mov.w	r0, #0
 80030f8:	f04f 0100 	mov.w	r1, #0
 80030fc:	00d9      	lsls	r1, r3, #3
 80030fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003102:	00d0      	lsls	r0, r2, #3
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	1911      	adds	r1, r2, r4
 800310a:	65b9      	str	r1, [r7, #88]	; 0x58
 800310c:	416b      	adcs	r3, r5
 800310e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	461a      	mov	r2, r3
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	1891      	adds	r1, r2, r2
 800311c:	62b9      	str	r1, [r7, #40]	; 0x28
 800311e:	415b      	adcs	r3, r3
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003122:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003126:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800312a:	f7fd f8b1 	bl	8000290 <__aeabi_uldivmod>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4b8c      	ldr	r3, [pc, #560]	; (8003364 <UART_SetConfig+0x38c>)
 8003134:	fba3 1302 	umull	r1, r3, r3, r2
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	2164      	movs	r1, #100	; 0x64
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	3332      	adds	r3, #50	; 0x32
 8003146:	4a87      	ldr	r2, [pc, #540]	; (8003364 <UART_SetConfig+0x38c>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	095b      	lsrs	r3, r3, #5
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003154:	441e      	add	r6, r3
 8003156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003158:	4618      	mov	r0, r3
 800315a:	f04f 0100 	mov.w	r1, #0
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	1894      	adds	r4, r2, r2
 8003164:	623c      	str	r4, [r7, #32]
 8003166:	415b      	adcs	r3, r3
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
 800316a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800316e:	1812      	adds	r2, r2, r0
 8003170:	eb41 0303 	adc.w	r3, r1, r3
 8003174:	f04f 0400 	mov.w	r4, #0
 8003178:	f04f 0500 	mov.w	r5, #0
 800317c:	00dd      	lsls	r5, r3, #3
 800317e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003182:	00d4      	lsls	r4, r2, #3
 8003184:	4622      	mov	r2, r4
 8003186:	462b      	mov	r3, r5
 8003188:	1814      	adds	r4, r2, r0
 800318a:	653c      	str	r4, [r7, #80]	; 0x50
 800318c:	414b      	adcs	r3, r1
 800318e:	657b      	str	r3, [r7, #84]	; 0x54
 8003190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	461a      	mov	r2, r3
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	1891      	adds	r1, r2, r2
 800319c:	61b9      	str	r1, [r7, #24]
 800319e:	415b      	adcs	r3, r3
 80031a0:	61fb      	str	r3, [r7, #28]
 80031a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80031aa:	f7fd f871 	bl	8000290 <__aeabi_uldivmod>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4b6c      	ldr	r3, [pc, #432]	; (8003364 <UART_SetConfig+0x38c>)
 80031b4:	fba3 1302 	umull	r1, r3, r3, r2
 80031b8:	095b      	lsrs	r3, r3, #5
 80031ba:	2164      	movs	r1, #100	; 0x64
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	3332      	adds	r3, #50	; 0x32
 80031c6:	4a67      	ldr	r2, [pc, #412]	; (8003364 <UART_SetConfig+0x38c>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	f003 0207 	and.w	r2, r3, #7
 80031d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4432      	add	r2, r6
 80031d8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031da:	e0b9      	b.n	8003350 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031de:	461c      	mov	r4, r3
 80031e0:	f04f 0500 	mov.w	r5, #0
 80031e4:	4622      	mov	r2, r4
 80031e6:	462b      	mov	r3, r5
 80031e8:	1891      	adds	r1, r2, r2
 80031ea:	6139      	str	r1, [r7, #16]
 80031ec:	415b      	adcs	r3, r3
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031f4:	1912      	adds	r2, r2, r4
 80031f6:	eb45 0303 	adc.w	r3, r5, r3
 80031fa:	f04f 0000 	mov.w	r0, #0
 80031fe:	f04f 0100 	mov.w	r1, #0
 8003202:	00d9      	lsls	r1, r3, #3
 8003204:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003208:	00d0      	lsls	r0, r2, #3
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	eb12 0804 	adds.w	r8, r2, r4
 8003212:	eb43 0905 	adc.w	r9, r3, r5
 8003216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4618      	mov	r0, r3
 800321c:	f04f 0100 	mov.w	r1, #0
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	008b      	lsls	r3, r1, #2
 800322a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800322e:	0082      	lsls	r2, r0, #2
 8003230:	4640      	mov	r0, r8
 8003232:	4649      	mov	r1, r9
 8003234:	f7fd f82c 	bl	8000290 <__aeabi_uldivmod>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4b49      	ldr	r3, [pc, #292]	; (8003364 <UART_SetConfig+0x38c>)
 800323e:	fba3 2302 	umull	r2, r3, r3, r2
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	011e      	lsls	r6, r3, #4
 8003246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003248:	4618      	mov	r0, r3
 800324a:	f04f 0100 	mov.w	r1, #0
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	1894      	adds	r4, r2, r2
 8003254:	60bc      	str	r4, [r7, #8]
 8003256:	415b      	adcs	r3, r3
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800325e:	1812      	adds	r2, r2, r0
 8003260:	eb41 0303 	adc.w	r3, r1, r3
 8003264:	f04f 0400 	mov.w	r4, #0
 8003268:	f04f 0500 	mov.w	r5, #0
 800326c:	00dd      	lsls	r5, r3, #3
 800326e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003272:	00d4      	lsls	r4, r2, #3
 8003274:	4622      	mov	r2, r4
 8003276:	462b      	mov	r3, r5
 8003278:	1814      	adds	r4, r2, r0
 800327a:	64bc      	str	r4, [r7, #72]	; 0x48
 800327c:	414b      	adcs	r3, r1
 800327e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	4618      	mov	r0, r3
 8003286:	f04f 0100 	mov.w	r1, #0
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	008b      	lsls	r3, r1, #2
 8003294:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003298:	0082      	lsls	r2, r0, #2
 800329a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800329e:	f7fc fff7 	bl	8000290 <__aeabi_uldivmod>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4b2f      	ldr	r3, [pc, #188]	; (8003364 <UART_SetConfig+0x38c>)
 80032a8:	fba3 1302 	umull	r1, r3, r3, r2
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	2164      	movs	r1, #100	; 0x64
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	3332      	adds	r3, #50	; 0x32
 80032ba:	4a2a      	ldr	r2, [pc, #168]	; (8003364 <UART_SetConfig+0x38c>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c6:	441e      	add	r6, r3
 80032c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ca:	4618      	mov	r0, r3
 80032cc:	f04f 0100 	mov.w	r1, #0
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	1894      	adds	r4, r2, r2
 80032d6:	603c      	str	r4, [r7, #0]
 80032d8:	415b      	adcs	r3, r3
 80032da:	607b      	str	r3, [r7, #4]
 80032dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032e0:	1812      	adds	r2, r2, r0
 80032e2:	eb41 0303 	adc.w	r3, r1, r3
 80032e6:	f04f 0400 	mov.w	r4, #0
 80032ea:	f04f 0500 	mov.w	r5, #0
 80032ee:	00dd      	lsls	r5, r3, #3
 80032f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032f4:	00d4      	lsls	r4, r2, #3
 80032f6:	4622      	mov	r2, r4
 80032f8:	462b      	mov	r3, r5
 80032fa:	eb12 0a00 	adds.w	sl, r2, r0
 80032fe:	eb43 0b01 	adc.w	fp, r3, r1
 8003302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4618      	mov	r0, r3
 8003308:	f04f 0100 	mov.w	r1, #0
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	008b      	lsls	r3, r1, #2
 8003316:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800331a:	0082      	lsls	r2, r0, #2
 800331c:	4650      	mov	r0, sl
 800331e:	4659      	mov	r1, fp
 8003320:	f7fc ffb6 	bl	8000290 <__aeabi_uldivmod>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <UART_SetConfig+0x38c>)
 800332a:	fba3 1302 	umull	r1, r3, r3, r2
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	2164      	movs	r1, #100	; 0x64
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	3332      	adds	r3, #50	; 0x32
 800333c:	4a09      	ldr	r2, [pc, #36]	; (8003364 <UART_SetConfig+0x38c>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	f003 020f 	and.w	r2, r3, #15
 8003348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4432      	add	r2, r6
 800334e:	609a      	str	r2, [r3, #8]
}
 8003350:	bf00      	nop
 8003352:	377c      	adds	r7, #124	; 0x7c
 8003354:	46bd      	mov	sp, r7
 8003356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800335a:	bf00      	nop
 800335c:	40011000 	.word	0x40011000
 8003360:	40011400 	.word	0x40011400
 8003364:	51eb851f 	.word	0x51eb851f

08003368 <calloc>:
 8003368:	4b02      	ldr	r3, [pc, #8]	; (8003374 <calloc+0xc>)
 800336a:	460a      	mov	r2, r1
 800336c:	4601      	mov	r1, r0
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	f000 b842 	b.w	80033f8 <_calloc_r>
 8003374:	2000000c 	.word	0x2000000c

08003378 <__errno>:
 8003378:	4b01      	ldr	r3, [pc, #4]	; (8003380 <__errno+0x8>)
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	2000000c 	.word	0x2000000c

08003384 <__libc_init_array>:
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	4d0d      	ldr	r5, [pc, #52]	; (80033bc <__libc_init_array+0x38>)
 8003388:	4c0d      	ldr	r4, [pc, #52]	; (80033c0 <__libc_init_array+0x3c>)
 800338a:	1b64      	subs	r4, r4, r5
 800338c:	10a4      	asrs	r4, r4, #2
 800338e:	2600      	movs	r6, #0
 8003390:	42a6      	cmp	r6, r4
 8003392:	d109      	bne.n	80033a8 <__libc_init_array+0x24>
 8003394:	4d0b      	ldr	r5, [pc, #44]	; (80033c4 <__libc_init_array+0x40>)
 8003396:	4c0c      	ldr	r4, [pc, #48]	; (80033c8 <__libc_init_array+0x44>)
 8003398:	f000 fc5e 	bl	8003c58 <_init>
 800339c:	1b64      	subs	r4, r4, r5
 800339e:	10a4      	asrs	r4, r4, #2
 80033a0:	2600      	movs	r6, #0
 80033a2:	42a6      	cmp	r6, r4
 80033a4:	d105      	bne.n	80033b2 <__libc_init_array+0x2e>
 80033a6:	bd70      	pop	{r4, r5, r6, pc}
 80033a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ac:	4798      	blx	r3
 80033ae:	3601      	adds	r6, #1
 80033b0:	e7ee      	b.n	8003390 <__libc_init_array+0xc>
 80033b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b6:	4798      	blx	r3
 80033b8:	3601      	adds	r6, #1
 80033ba:	e7f2      	b.n	80033a2 <__libc_init_array+0x1e>
 80033bc:	08003f18 	.word	0x08003f18
 80033c0:	08003f18 	.word	0x08003f18
 80033c4:	08003f18 	.word	0x08003f18
 80033c8:	08003f1c 	.word	0x08003f1c

080033cc <memcpy>:
 80033cc:	440a      	add	r2, r1
 80033ce:	4291      	cmp	r1, r2
 80033d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80033d4:	d100      	bne.n	80033d8 <memcpy+0xc>
 80033d6:	4770      	bx	lr
 80033d8:	b510      	push	{r4, lr}
 80033da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033e2:	4291      	cmp	r1, r2
 80033e4:	d1f9      	bne.n	80033da <memcpy+0xe>
 80033e6:	bd10      	pop	{r4, pc}

080033e8 <memset>:
 80033e8:	4402      	add	r2, r0
 80033ea:	4603      	mov	r3, r0
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d100      	bne.n	80033f2 <memset+0xa>
 80033f0:	4770      	bx	lr
 80033f2:	f803 1b01 	strb.w	r1, [r3], #1
 80033f6:	e7f9      	b.n	80033ec <memset+0x4>

080033f8 <_calloc_r>:
 80033f8:	b513      	push	{r0, r1, r4, lr}
 80033fa:	434a      	muls	r2, r1
 80033fc:	4611      	mov	r1, r2
 80033fe:	9201      	str	r2, [sp, #4]
 8003400:	f000 f80a 	bl	8003418 <_malloc_r>
 8003404:	4604      	mov	r4, r0
 8003406:	b118      	cbz	r0, 8003410 <_calloc_r+0x18>
 8003408:	9a01      	ldr	r2, [sp, #4]
 800340a:	2100      	movs	r1, #0
 800340c:	f7ff ffec 	bl	80033e8 <memset>
 8003410:	4620      	mov	r0, r4
 8003412:	b002      	add	sp, #8
 8003414:	bd10      	pop	{r4, pc}
	...

08003418 <_malloc_r>:
 8003418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341a:	1ccd      	adds	r5, r1, #3
 800341c:	f025 0503 	bic.w	r5, r5, #3
 8003420:	3508      	adds	r5, #8
 8003422:	2d0c      	cmp	r5, #12
 8003424:	bf38      	it	cc
 8003426:	250c      	movcc	r5, #12
 8003428:	2d00      	cmp	r5, #0
 800342a:	4606      	mov	r6, r0
 800342c:	db01      	blt.n	8003432 <_malloc_r+0x1a>
 800342e:	42a9      	cmp	r1, r5
 8003430:	d903      	bls.n	800343a <_malloc_r+0x22>
 8003432:	230c      	movs	r3, #12
 8003434:	6033      	str	r3, [r6, #0]
 8003436:	2000      	movs	r0, #0
 8003438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800343a:	f000 f877 	bl	800352c <__malloc_lock>
 800343e:	4921      	ldr	r1, [pc, #132]	; (80034c4 <_malloc_r+0xac>)
 8003440:	680a      	ldr	r2, [r1, #0]
 8003442:	4614      	mov	r4, r2
 8003444:	b99c      	cbnz	r4, 800346e <_malloc_r+0x56>
 8003446:	4f20      	ldr	r7, [pc, #128]	; (80034c8 <_malloc_r+0xb0>)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	b923      	cbnz	r3, 8003456 <_malloc_r+0x3e>
 800344c:	4621      	mov	r1, r4
 800344e:	4630      	mov	r0, r6
 8003450:	f000 f83c 	bl	80034cc <_sbrk_r>
 8003454:	6038      	str	r0, [r7, #0]
 8003456:	4629      	mov	r1, r5
 8003458:	4630      	mov	r0, r6
 800345a:	f000 f837 	bl	80034cc <_sbrk_r>
 800345e:	1c43      	adds	r3, r0, #1
 8003460:	d123      	bne.n	80034aa <_malloc_r+0x92>
 8003462:	230c      	movs	r3, #12
 8003464:	6033      	str	r3, [r6, #0]
 8003466:	4630      	mov	r0, r6
 8003468:	f000 f866 	bl	8003538 <__malloc_unlock>
 800346c:	e7e3      	b.n	8003436 <_malloc_r+0x1e>
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	1b5b      	subs	r3, r3, r5
 8003472:	d417      	bmi.n	80034a4 <_malloc_r+0x8c>
 8003474:	2b0b      	cmp	r3, #11
 8003476:	d903      	bls.n	8003480 <_malloc_r+0x68>
 8003478:	6023      	str	r3, [r4, #0]
 800347a:	441c      	add	r4, r3
 800347c:	6025      	str	r5, [r4, #0]
 800347e:	e004      	b.n	800348a <_malloc_r+0x72>
 8003480:	6863      	ldr	r3, [r4, #4]
 8003482:	42a2      	cmp	r2, r4
 8003484:	bf0c      	ite	eq
 8003486:	600b      	streq	r3, [r1, #0]
 8003488:	6053      	strne	r3, [r2, #4]
 800348a:	4630      	mov	r0, r6
 800348c:	f000 f854 	bl	8003538 <__malloc_unlock>
 8003490:	f104 000b 	add.w	r0, r4, #11
 8003494:	1d23      	adds	r3, r4, #4
 8003496:	f020 0007 	bic.w	r0, r0, #7
 800349a:	1ac2      	subs	r2, r0, r3
 800349c:	d0cc      	beq.n	8003438 <_malloc_r+0x20>
 800349e:	1a1b      	subs	r3, r3, r0
 80034a0:	50a3      	str	r3, [r4, r2]
 80034a2:	e7c9      	b.n	8003438 <_malloc_r+0x20>
 80034a4:	4622      	mov	r2, r4
 80034a6:	6864      	ldr	r4, [r4, #4]
 80034a8:	e7cc      	b.n	8003444 <_malloc_r+0x2c>
 80034aa:	1cc4      	adds	r4, r0, #3
 80034ac:	f024 0403 	bic.w	r4, r4, #3
 80034b0:	42a0      	cmp	r0, r4
 80034b2:	d0e3      	beq.n	800347c <_malloc_r+0x64>
 80034b4:	1a21      	subs	r1, r4, r0
 80034b6:	4630      	mov	r0, r6
 80034b8:	f000 f808 	bl	80034cc <_sbrk_r>
 80034bc:	3001      	adds	r0, #1
 80034be:	d1dd      	bne.n	800347c <_malloc_r+0x64>
 80034c0:	e7cf      	b.n	8003462 <_malloc_r+0x4a>
 80034c2:	bf00      	nop
 80034c4:	200000ac 	.word	0x200000ac
 80034c8:	200000b0 	.word	0x200000b0

080034cc <_sbrk_r>:
 80034cc:	b538      	push	{r3, r4, r5, lr}
 80034ce:	4d06      	ldr	r5, [pc, #24]	; (80034e8 <_sbrk_r+0x1c>)
 80034d0:	2300      	movs	r3, #0
 80034d2:	4604      	mov	r4, r0
 80034d4:	4608      	mov	r0, r1
 80034d6:	602b      	str	r3, [r5, #0]
 80034d8:	f7fd fbfe 	bl	8000cd8 <_sbrk>
 80034dc:	1c43      	adds	r3, r0, #1
 80034de:	d102      	bne.n	80034e6 <_sbrk_r+0x1a>
 80034e0:	682b      	ldr	r3, [r5, #0]
 80034e2:	b103      	cbz	r3, 80034e6 <_sbrk_r+0x1a>
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	bd38      	pop	{r3, r4, r5, pc}
 80034e8:	200001bc 	.word	0x200001bc

080034ec <siprintf>:
 80034ec:	b40e      	push	{r1, r2, r3}
 80034ee:	b500      	push	{lr}
 80034f0:	b09c      	sub	sp, #112	; 0x70
 80034f2:	ab1d      	add	r3, sp, #116	; 0x74
 80034f4:	9002      	str	r0, [sp, #8]
 80034f6:	9006      	str	r0, [sp, #24]
 80034f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034fc:	4809      	ldr	r0, [pc, #36]	; (8003524 <siprintf+0x38>)
 80034fe:	9107      	str	r1, [sp, #28]
 8003500:	9104      	str	r1, [sp, #16]
 8003502:	4909      	ldr	r1, [pc, #36]	; (8003528 <siprintf+0x3c>)
 8003504:	f853 2b04 	ldr.w	r2, [r3], #4
 8003508:	9105      	str	r1, [sp, #20]
 800350a:	6800      	ldr	r0, [r0, #0]
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	a902      	add	r1, sp, #8
 8003510:	f000 f874 	bl	80035fc <_svfiprintf_r>
 8003514:	9b02      	ldr	r3, [sp, #8]
 8003516:	2200      	movs	r2, #0
 8003518:	701a      	strb	r2, [r3, #0]
 800351a:	b01c      	add	sp, #112	; 0x70
 800351c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003520:	b003      	add	sp, #12
 8003522:	4770      	bx	lr
 8003524:	2000000c 	.word	0x2000000c
 8003528:	ffff0208 	.word	0xffff0208

0800352c <__malloc_lock>:
 800352c:	4801      	ldr	r0, [pc, #4]	; (8003534 <__malloc_lock+0x8>)
 800352e:	f000 baf9 	b.w	8003b24 <__retarget_lock_acquire_recursive>
 8003532:	bf00      	nop
 8003534:	200001c4 	.word	0x200001c4

08003538 <__malloc_unlock>:
 8003538:	4801      	ldr	r0, [pc, #4]	; (8003540 <__malloc_unlock+0x8>)
 800353a:	f000 baf4 	b.w	8003b26 <__retarget_lock_release_recursive>
 800353e:	bf00      	nop
 8003540:	200001c4 	.word	0x200001c4

08003544 <__ssputs_r>:
 8003544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003548:	688e      	ldr	r6, [r1, #8]
 800354a:	429e      	cmp	r6, r3
 800354c:	4682      	mov	sl, r0
 800354e:	460c      	mov	r4, r1
 8003550:	4690      	mov	r8, r2
 8003552:	461f      	mov	r7, r3
 8003554:	d838      	bhi.n	80035c8 <__ssputs_r+0x84>
 8003556:	898a      	ldrh	r2, [r1, #12]
 8003558:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800355c:	d032      	beq.n	80035c4 <__ssputs_r+0x80>
 800355e:	6825      	ldr	r5, [r4, #0]
 8003560:	6909      	ldr	r1, [r1, #16]
 8003562:	eba5 0901 	sub.w	r9, r5, r1
 8003566:	6965      	ldr	r5, [r4, #20]
 8003568:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800356c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003570:	3301      	adds	r3, #1
 8003572:	444b      	add	r3, r9
 8003574:	106d      	asrs	r5, r5, #1
 8003576:	429d      	cmp	r5, r3
 8003578:	bf38      	it	cc
 800357a:	461d      	movcc	r5, r3
 800357c:	0553      	lsls	r3, r2, #21
 800357e:	d531      	bpl.n	80035e4 <__ssputs_r+0xa0>
 8003580:	4629      	mov	r1, r5
 8003582:	f7ff ff49 	bl	8003418 <_malloc_r>
 8003586:	4606      	mov	r6, r0
 8003588:	b950      	cbnz	r0, 80035a0 <__ssputs_r+0x5c>
 800358a:	230c      	movs	r3, #12
 800358c:	f8ca 3000 	str.w	r3, [sl]
 8003590:	89a3      	ldrh	r3, [r4, #12]
 8003592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003596:	81a3      	strh	r3, [r4, #12]
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a0:	6921      	ldr	r1, [r4, #16]
 80035a2:	464a      	mov	r2, r9
 80035a4:	f7ff ff12 	bl	80033cc <memcpy>
 80035a8:	89a3      	ldrh	r3, [r4, #12]
 80035aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b2:	81a3      	strh	r3, [r4, #12]
 80035b4:	6126      	str	r6, [r4, #16]
 80035b6:	6165      	str	r5, [r4, #20]
 80035b8:	444e      	add	r6, r9
 80035ba:	eba5 0509 	sub.w	r5, r5, r9
 80035be:	6026      	str	r6, [r4, #0]
 80035c0:	60a5      	str	r5, [r4, #8]
 80035c2:	463e      	mov	r6, r7
 80035c4:	42be      	cmp	r6, r7
 80035c6:	d900      	bls.n	80035ca <__ssputs_r+0x86>
 80035c8:	463e      	mov	r6, r7
 80035ca:	4632      	mov	r2, r6
 80035cc:	6820      	ldr	r0, [r4, #0]
 80035ce:	4641      	mov	r1, r8
 80035d0:	f000 faaa 	bl	8003b28 <memmove>
 80035d4:	68a3      	ldr	r3, [r4, #8]
 80035d6:	6822      	ldr	r2, [r4, #0]
 80035d8:	1b9b      	subs	r3, r3, r6
 80035da:	4432      	add	r2, r6
 80035dc:	60a3      	str	r3, [r4, #8]
 80035de:	6022      	str	r2, [r4, #0]
 80035e0:	2000      	movs	r0, #0
 80035e2:	e7db      	b.n	800359c <__ssputs_r+0x58>
 80035e4:	462a      	mov	r2, r5
 80035e6:	f000 fb09 	bl	8003bfc <_realloc_r>
 80035ea:	4606      	mov	r6, r0
 80035ec:	2800      	cmp	r0, #0
 80035ee:	d1e1      	bne.n	80035b4 <__ssputs_r+0x70>
 80035f0:	6921      	ldr	r1, [r4, #16]
 80035f2:	4650      	mov	r0, sl
 80035f4:	f000 fab2 	bl	8003b5c <_free_r>
 80035f8:	e7c7      	b.n	800358a <__ssputs_r+0x46>
	...

080035fc <_svfiprintf_r>:
 80035fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003600:	4698      	mov	r8, r3
 8003602:	898b      	ldrh	r3, [r1, #12]
 8003604:	061b      	lsls	r3, r3, #24
 8003606:	b09d      	sub	sp, #116	; 0x74
 8003608:	4607      	mov	r7, r0
 800360a:	460d      	mov	r5, r1
 800360c:	4614      	mov	r4, r2
 800360e:	d50e      	bpl.n	800362e <_svfiprintf_r+0x32>
 8003610:	690b      	ldr	r3, [r1, #16]
 8003612:	b963      	cbnz	r3, 800362e <_svfiprintf_r+0x32>
 8003614:	2140      	movs	r1, #64	; 0x40
 8003616:	f7ff feff 	bl	8003418 <_malloc_r>
 800361a:	6028      	str	r0, [r5, #0]
 800361c:	6128      	str	r0, [r5, #16]
 800361e:	b920      	cbnz	r0, 800362a <_svfiprintf_r+0x2e>
 8003620:	230c      	movs	r3, #12
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	e0d1      	b.n	80037ce <_svfiprintf_r+0x1d2>
 800362a:	2340      	movs	r3, #64	; 0x40
 800362c:	616b      	str	r3, [r5, #20]
 800362e:	2300      	movs	r3, #0
 8003630:	9309      	str	r3, [sp, #36]	; 0x24
 8003632:	2320      	movs	r3, #32
 8003634:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003638:	f8cd 800c 	str.w	r8, [sp, #12]
 800363c:	2330      	movs	r3, #48	; 0x30
 800363e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80037e8 <_svfiprintf_r+0x1ec>
 8003642:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003646:	f04f 0901 	mov.w	r9, #1
 800364a:	4623      	mov	r3, r4
 800364c:	469a      	mov	sl, r3
 800364e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003652:	b10a      	cbz	r2, 8003658 <_svfiprintf_r+0x5c>
 8003654:	2a25      	cmp	r2, #37	; 0x25
 8003656:	d1f9      	bne.n	800364c <_svfiprintf_r+0x50>
 8003658:	ebba 0b04 	subs.w	fp, sl, r4
 800365c:	d00b      	beq.n	8003676 <_svfiprintf_r+0x7a>
 800365e:	465b      	mov	r3, fp
 8003660:	4622      	mov	r2, r4
 8003662:	4629      	mov	r1, r5
 8003664:	4638      	mov	r0, r7
 8003666:	f7ff ff6d 	bl	8003544 <__ssputs_r>
 800366a:	3001      	adds	r0, #1
 800366c:	f000 80aa 	beq.w	80037c4 <_svfiprintf_r+0x1c8>
 8003670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003672:	445a      	add	r2, fp
 8003674:	9209      	str	r2, [sp, #36]	; 0x24
 8003676:	f89a 3000 	ldrb.w	r3, [sl]
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80a2 	beq.w	80037c4 <_svfiprintf_r+0x1c8>
 8003680:	2300      	movs	r3, #0
 8003682:	f04f 32ff 	mov.w	r2, #4294967295
 8003686:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800368a:	f10a 0a01 	add.w	sl, sl, #1
 800368e:	9304      	str	r3, [sp, #16]
 8003690:	9307      	str	r3, [sp, #28]
 8003692:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003696:	931a      	str	r3, [sp, #104]	; 0x68
 8003698:	4654      	mov	r4, sl
 800369a:	2205      	movs	r2, #5
 800369c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036a0:	4851      	ldr	r0, [pc, #324]	; (80037e8 <_svfiprintf_r+0x1ec>)
 80036a2:	f7fc fda5 	bl	80001f0 <memchr>
 80036a6:	9a04      	ldr	r2, [sp, #16]
 80036a8:	b9d8      	cbnz	r0, 80036e2 <_svfiprintf_r+0xe6>
 80036aa:	06d0      	lsls	r0, r2, #27
 80036ac:	bf44      	itt	mi
 80036ae:	2320      	movmi	r3, #32
 80036b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036b4:	0711      	lsls	r1, r2, #28
 80036b6:	bf44      	itt	mi
 80036b8:	232b      	movmi	r3, #43	; 0x2b
 80036ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036be:	f89a 3000 	ldrb.w	r3, [sl]
 80036c2:	2b2a      	cmp	r3, #42	; 0x2a
 80036c4:	d015      	beq.n	80036f2 <_svfiprintf_r+0xf6>
 80036c6:	9a07      	ldr	r2, [sp, #28]
 80036c8:	4654      	mov	r4, sl
 80036ca:	2000      	movs	r0, #0
 80036cc:	f04f 0c0a 	mov.w	ip, #10
 80036d0:	4621      	mov	r1, r4
 80036d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036d6:	3b30      	subs	r3, #48	; 0x30
 80036d8:	2b09      	cmp	r3, #9
 80036da:	d94e      	bls.n	800377a <_svfiprintf_r+0x17e>
 80036dc:	b1b0      	cbz	r0, 800370c <_svfiprintf_r+0x110>
 80036de:	9207      	str	r2, [sp, #28]
 80036e0:	e014      	b.n	800370c <_svfiprintf_r+0x110>
 80036e2:	eba0 0308 	sub.w	r3, r0, r8
 80036e6:	fa09 f303 	lsl.w	r3, r9, r3
 80036ea:	4313      	orrs	r3, r2
 80036ec:	9304      	str	r3, [sp, #16]
 80036ee:	46a2      	mov	sl, r4
 80036f0:	e7d2      	b.n	8003698 <_svfiprintf_r+0x9c>
 80036f2:	9b03      	ldr	r3, [sp, #12]
 80036f4:	1d19      	adds	r1, r3, #4
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	9103      	str	r1, [sp, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	bfbb      	ittet	lt
 80036fe:	425b      	neglt	r3, r3
 8003700:	f042 0202 	orrlt.w	r2, r2, #2
 8003704:	9307      	strge	r3, [sp, #28]
 8003706:	9307      	strlt	r3, [sp, #28]
 8003708:	bfb8      	it	lt
 800370a:	9204      	strlt	r2, [sp, #16]
 800370c:	7823      	ldrb	r3, [r4, #0]
 800370e:	2b2e      	cmp	r3, #46	; 0x2e
 8003710:	d10c      	bne.n	800372c <_svfiprintf_r+0x130>
 8003712:	7863      	ldrb	r3, [r4, #1]
 8003714:	2b2a      	cmp	r3, #42	; 0x2a
 8003716:	d135      	bne.n	8003784 <_svfiprintf_r+0x188>
 8003718:	9b03      	ldr	r3, [sp, #12]
 800371a:	1d1a      	adds	r2, r3, #4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	9203      	str	r2, [sp, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	bfb8      	it	lt
 8003724:	f04f 33ff 	movlt.w	r3, #4294967295
 8003728:	3402      	adds	r4, #2
 800372a:	9305      	str	r3, [sp, #20]
 800372c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80037f8 <_svfiprintf_r+0x1fc>
 8003730:	7821      	ldrb	r1, [r4, #0]
 8003732:	2203      	movs	r2, #3
 8003734:	4650      	mov	r0, sl
 8003736:	f7fc fd5b 	bl	80001f0 <memchr>
 800373a:	b140      	cbz	r0, 800374e <_svfiprintf_r+0x152>
 800373c:	2340      	movs	r3, #64	; 0x40
 800373e:	eba0 000a 	sub.w	r0, r0, sl
 8003742:	fa03 f000 	lsl.w	r0, r3, r0
 8003746:	9b04      	ldr	r3, [sp, #16]
 8003748:	4303      	orrs	r3, r0
 800374a:	3401      	adds	r4, #1
 800374c:	9304      	str	r3, [sp, #16]
 800374e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003752:	4826      	ldr	r0, [pc, #152]	; (80037ec <_svfiprintf_r+0x1f0>)
 8003754:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003758:	2206      	movs	r2, #6
 800375a:	f7fc fd49 	bl	80001f0 <memchr>
 800375e:	2800      	cmp	r0, #0
 8003760:	d038      	beq.n	80037d4 <_svfiprintf_r+0x1d8>
 8003762:	4b23      	ldr	r3, [pc, #140]	; (80037f0 <_svfiprintf_r+0x1f4>)
 8003764:	bb1b      	cbnz	r3, 80037ae <_svfiprintf_r+0x1b2>
 8003766:	9b03      	ldr	r3, [sp, #12]
 8003768:	3307      	adds	r3, #7
 800376a:	f023 0307 	bic.w	r3, r3, #7
 800376e:	3308      	adds	r3, #8
 8003770:	9303      	str	r3, [sp, #12]
 8003772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003774:	4433      	add	r3, r6
 8003776:	9309      	str	r3, [sp, #36]	; 0x24
 8003778:	e767      	b.n	800364a <_svfiprintf_r+0x4e>
 800377a:	fb0c 3202 	mla	r2, ip, r2, r3
 800377e:	460c      	mov	r4, r1
 8003780:	2001      	movs	r0, #1
 8003782:	e7a5      	b.n	80036d0 <_svfiprintf_r+0xd4>
 8003784:	2300      	movs	r3, #0
 8003786:	3401      	adds	r4, #1
 8003788:	9305      	str	r3, [sp, #20]
 800378a:	4619      	mov	r1, r3
 800378c:	f04f 0c0a 	mov.w	ip, #10
 8003790:	4620      	mov	r0, r4
 8003792:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003796:	3a30      	subs	r2, #48	; 0x30
 8003798:	2a09      	cmp	r2, #9
 800379a:	d903      	bls.n	80037a4 <_svfiprintf_r+0x1a8>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0c5      	beq.n	800372c <_svfiprintf_r+0x130>
 80037a0:	9105      	str	r1, [sp, #20]
 80037a2:	e7c3      	b.n	800372c <_svfiprintf_r+0x130>
 80037a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80037a8:	4604      	mov	r4, r0
 80037aa:	2301      	movs	r3, #1
 80037ac:	e7f0      	b.n	8003790 <_svfiprintf_r+0x194>
 80037ae:	ab03      	add	r3, sp, #12
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	462a      	mov	r2, r5
 80037b4:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <_svfiprintf_r+0x1f8>)
 80037b6:	a904      	add	r1, sp, #16
 80037b8:	4638      	mov	r0, r7
 80037ba:	f3af 8000 	nop.w
 80037be:	1c42      	adds	r2, r0, #1
 80037c0:	4606      	mov	r6, r0
 80037c2:	d1d6      	bne.n	8003772 <_svfiprintf_r+0x176>
 80037c4:	89ab      	ldrh	r3, [r5, #12]
 80037c6:	065b      	lsls	r3, r3, #25
 80037c8:	f53f af2c 	bmi.w	8003624 <_svfiprintf_r+0x28>
 80037cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037ce:	b01d      	add	sp, #116	; 0x74
 80037d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037d4:	ab03      	add	r3, sp, #12
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	462a      	mov	r2, r5
 80037da:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <_svfiprintf_r+0x1f8>)
 80037dc:	a904      	add	r1, sp, #16
 80037de:	4638      	mov	r0, r7
 80037e0:	f000 f87a 	bl	80038d8 <_printf_i>
 80037e4:	e7eb      	b.n	80037be <_svfiprintf_r+0x1c2>
 80037e6:	bf00      	nop
 80037e8:	08003edc 	.word	0x08003edc
 80037ec:	08003ee6 	.word	0x08003ee6
 80037f0:	00000000 	.word	0x00000000
 80037f4:	08003545 	.word	0x08003545
 80037f8:	08003ee2 	.word	0x08003ee2

080037fc <_printf_common>:
 80037fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003800:	4616      	mov	r6, r2
 8003802:	4699      	mov	r9, r3
 8003804:	688a      	ldr	r2, [r1, #8]
 8003806:	690b      	ldr	r3, [r1, #16]
 8003808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800380c:	4293      	cmp	r3, r2
 800380e:	bfb8      	it	lt
 8003810:	4613      	movlt	r3, r2
 8003812:	6033      	str	r3, [r6, #0]
 8003814:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003818:	4607      	mov	r7, r0
 800381a:	460c      	mov	r4, r1
 800381c:	b10a      	cbz	r2, 8003822 <_printf_common+0x26>
 800381e:	3301      	adds	r3, #1
 8003820:	6033      	str	r3, [r6, #0]
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	0699      	lsls	r1, r3, #26
 8003826:	bf42      	ittt	mi
 8003828:	6833      	ldrmi	r3, [r6, #0]
 800382a:	3302      	addmi	r3, #2
 800382c:	6033      	strmi	r3, [r6, #0]
 800382e:	6825      	ldr	r5, [r4, #0]
 8003830:	f015 0506 	ands.w	r5, r5, #6
 8003834:	d106      	bne.n	8003844 <_printf_common+0x48>
 8003836:	f104 0a19 	add.w	sl, r4, #25
 800383a:	68e3      	ldr	r3, [r4, #12]
 800383c:	6832      	ldr	r2, [r6, #0]
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	42ab      	cmp	r3, r5
 8003842:	dc26      	bgt.n	8003892 <_printf_common+0x96>
 8003844:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003848:	1e13      	subs	r3, r2, #0
 800384a:	6822      	ldr	r2, [r4, #0]
 800384c:	bf18      	it	ne
 800384e:	2301      	movne	r3, #1
 8003850:	0692      	lsls	r2, r2, #26
 8003852:	d42b      	bmi.n	80038ac <_printf_common+0xb0>
 8003854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003858:	4649      	mov	r1, r9
 800385a:	4638      	mov	r0, r7
 800385c:	47c0      	blx	r8
 800385e:	3001      	adds	r0, #1
 8003860:	d01e      	beq.n	80038a0 <_printf_common+0xa4>
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	68e5      	ldr	r5, [r4, #12]
 8003866:	6832      	ldr	r2, [r6, #0]
 8003868:	f003 0306 	and.w	r3, r3, #6
 800386c:	2b04      	cmp	r3, #4
 800386e:	bf08      	it	eq
 8003870:	1aad      	subeq	r5, r5, r2
 8003872:	68a3      	ldr	r3, [r4, #8]
 8003874:	6922      	ldr	r2, [r4, #16]
 8003876:	bf0c      	ite	eq
 8003878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800387c:	2500      	movne	r5, #0
 800387e:	4293      	cmp	r3, r2
 8003880:	bfc4      	itt	gt
 8003882:	1a9b      	subgt	r3, r3, r2
 8003884:	18ed      	addgt	r5, r5, r3
 8003886:	2600      	movs	r6, #0
 8003888:	341a      	adds	r4, #26
 800388a:	42b5      	cmp	r5, r6
 800388c:	d11a      	bne.n	80038c4 <_printf_common+0xc8>
 800388e:	2000      	movs	r0, #0
 8003890:	e008      	b.n	80038a4 <_printf_common+0xa8>
 8003892:	2301      	movs	r3, #1
 8003894:	4652      	mov	r2, sl
 8003896:	4649      	mov	r1, r9
 8003898:	4638      	mov	r0, r7
 800389a:	47c0      	blx	r8
 800389c:	3001      	adds	r0, #1
 800389e:	d103      	bne.n	80038a8 <_printf_common+0xac>
 80038a0:	f04f 30ff 	mov.w	r0, #4294967295
 80038a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a8:	3501      	adds	r5, #1
 80038aa:	e7c6      	b.n	800383a <_printf_common+0x3e>
 80038ac:	18e1      	adds	r1, r4, r3
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	2030      	movs	r0, #48	; 0x30
 80038b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038b6:	4422      	add	r2, r4
 80038b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038c0:	3302      	adds	r3, #2
 80038c2:	e7c7      	b.n	8003854 <_printf_common+0x58>
 80038c4:	2301      	movs	r3, #1
 80038c6:	4622      	mov	r2, r4
 80038c8:	4649      	mov	r1, r9
 80038ca:	4638      	mov	r0, r7
 80038cc:	47c0      	blx	r8
 80038ce:	3001      	adds	r0, #1
 80038d0:	d0e6      	beq.n	80038a0 <_printf_common+0xa4>
 80038d2:	3601      	adds	r6, #1
 80038d4:	e7d9      	b.n	800388a <_printf_common+0x8e>
	...

080038d8 <_printf_i>:
 80038d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038dc:	460c      	mov	r4, r1
 80038de:	4691      	mov	r9, r2
 80038e0:	7e27      	ldrb	r7, [r4, #24]
 80038e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80038e4:	2f78      	cmp	r7, #120	; 0x78
 80038e6:	4680      	mov	r8, r0
 80038e8:	469a      	mov	sl, r3
 80038ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038ee:	d807      	bhi.n	8003900 <_printf_i+0x28>
 80038f0:	2f62      	cmp	r7, #98	; 0x62
 80038f2:	d80a      	bhi.n	800390a <_printf_i+0x32>
 80038f4:	2f00      	cmp	r7, #0
 80038f6:	f000 80d8 	beq.w	8003aaa <_printf_i+0x1d2>
 80038fa:	2f58      	cmp	r7, #88	; 0x58
 80038fc:	f000 80a3 	beq.w	8003a46 <_printf_i+0x16e>
 8003900:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003904:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003908:	e03a      	b.n	8003980 <_printf_i+0xa8>
 800390a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800390e:	2b15      	cmp	r3, #21
 8003910:	d8f6      	bhi.n	8003900 <_printf_i+0x28>
 8003912:	a001      	add	r0, pc, #4	; (adr r0, 8003918 <_printf_i+0x40>)
 8003914:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003918:	08003971 	.word	0x08003971
 800391c:	08003985 	.word	0x08003985
 8003920:	08003901 	.word	0x08003901
 8003924:	08003901 	.word	0x08003901
 8003928:	08003901 	.word	0x08003901
 800392c:	08003901 	.word	0x08003901
 8003930:	08003985 	.word	0x08003985
 8003934:	08003901 	.word	0x08003901
 8003938:	08003901 	.word	0x08003901
 800393c:	08003901 	.word	0x08003901
 8003940:	08003901 	.word	0x08003901
 8003944:	08003a91 	.word	0x08003a91
 8003948:	080039b5 	.word	0x080039b5
 800394c:	08003a73 	.word	0x08003a73
 8003950:	08003901 	.word	0x08003901
 8003954:	08003901 	.word	0x08003901
 8003958:	08003ab3 	.word	0x08003ab3
 800395c:	08003901 	.word	0x08003901
 8003960:	080039b5 	.word	0x080039b5
 8003964:	08003901 	.word	0x08003901
 8003968:	08003901 	.word	0x08003901
 800396c:	08003a7b 	.word	0x08003a7b
 8003970:	680b      	ldr	r3, [r1, #0]
 8003972:	1d1a      	adds	r2, r3, #4
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	600a      	str	r2, [r1, #0]
 8003978:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800397c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003980:	2301      	movs	r3, #1
 8003982:	e0a3      	b.n	8003acc <_printf_i+0x1f4>
 8003984:	6825      	ldr	r5, [r4, #0]
 8003986:	6808      	ldr	r0, [r1, #0]
 8003988:	062e      	lsls	r6, r5, #24
 800398a:	f100 0304 	add.w	r3, r0, #4
 800398e:	d50a      	bpl.n	80039a6 <_printf_i+0xce>
 8003990:	6805      	ldr	r5, [r0, #0]
 8003992:	600b      	str	r3, [r1, #0]
 8003994:	2d00      	cmp	r5, #0
 8003996:	da03      	bge.n	80039a0 <_printf_i+0xc8>
 8003998:	232d      	movs	r3, #45	; 0x2d
 800399a:	426d      	negs	r5, r5
 800399c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039a0:	485e      	ldr	r0, [pc, #376]	; (8003b1c <_printf_i+0x244>)
 80039a2:	230a      	movs	r3, #10
 80039a4:	e019      	b.n	80039da <_printf_i+0x102>
 80039a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80039aa:	6805      	ldr	r5, [r0, #0]
 80039ac:	600b      	str	r3, [r1, #0]
 80039ae:	bf18      	it	ne
 80039b0:	b22d      	sxthne	r5, r5
 80039b2:	e7ef      	b.n	8003994 <_printf_i+0xbc>
 80039b4:	680b      	ldr	r3, [r1, #0]
 80039b6:	6825      	ldr	r5, [r4, #0]
 80039b8:	1d18      	adds	r0, r3, #4
 80039ba:	6008      	str	r0, [r1, #0]
 80039bc:	0628      	lsls	r0, r5, #24
 80039be:	d501      	bpl.n	80039c4 <_printf_i+0xec>
 80039c0:	681d      	ldr	r5, [r3, #0]
 80039c2:	e002      	b.n	80039ca <_printf_i+0xf2>
 80039c4:	0669      	lsls	r1, r5, #25
 80039c6:	d5fb      	bpl.n	80039c0 <_printf_i+0xe8>
 80039c8:	881d      	ldrh	r5, [r3, #0]
 80039ca:	4854      	ldr	r0, [pc, #336]	; (8003b1c <_printf_i+0x244>)
 80039cc:	2f6f      	cmp	r7, #111	; 0x6f
 80039ce:	bf0c      	ite	eq
 80039d0:	2308      	moveq	r3, #8
 80039d2:	230a      	movne	r3, #10
 80039d4:	2100      	movs	r1, #0
 80039d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039da:	6866      	ldr	r6, [r4, #4]
 80039dc:	60a6      	str	r6, [r4, #8]
 80039de:	2e00      	cmp	r6, #0
 80039e0:	bfa2      	ittt	ge
 80039e2:	6821      	ldrge	r1, [r4, #0]
 80039e4:	f021 0104 	bicge.w	r1, r1, #4
 80039e8:	6021      	strge	r1, [r4, #0]
 80039ea:	b90d      	cbnz	r5, 80039f0 <_printf_i+0x118>
 80039ec:	2e00      	cmp	r6, #0
 80039ee:	d04d      	beq.n	8003a8c <_printf_i+0x1b4>
 80039f0:	4616      	mov	r6, r2
 80039f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80039f6:	fb03 5711 	mls	r7, r3, r1, r5
 80039fa:	5dc7      	ldrb	r7, [r0, r7]
 80039fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a00:	462f      	mov	r7, r5
 8003a02:	42bb      	cmp	r3, r7
 8003a04:	460d      	mov	r5, r1
 8003a06:	d9f4      	bls.n	80039f2 <_printf_i+0x11a>
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d10b      	bne.n	8003a24 <_printf_i+0x14c>
 8003a0c:	6823      	ldr	r3, [r4, #0]
 8003a0e:	07df      	lsls	r7, r3, #31
 8003a10:	d508      	bpl.n	8003a24 <_printf_i+0x14c>
 8003a12:	6923      	ldr	r3, [r4, #16]
 8003a14:	6861      	ldr	r1, [r4, #4]
 8003a16:	4299      	cmp	r1, r3
 8003a18:	bfde      	ittt	le
 8003a1a:	2330      	movle	r3, #48	; 0x30
 8003a1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a24:	1b92      	subs	r2, r2, r6
 8003a26:	6122      	str	r2, [r4, #16]
 8003a28:	f8cd a000 	str.w	sl, [sp]
 8003a2c:	464b      	mov	r3, r9
 8003a2e:	aa03      	add	r2, sp, #12
 8003a30:	4621      	mov	r1, r4
 8003a32:	4640      	mov	r0, r8
 8003a34:	f7ff fee2 	bl	80037fc <_printf_common>
 8003a38:	3001      	adds	r0, #1
 8003a3a:	d14c      	bne.n	8003ad6 <_printf_i+0x1fe>
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a40:	b004      	add	sp, #16
 8003a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a46:	4835      	ldr	r0, [pc, #212]	; (8003b1c <_printf_i+0x244>)
 8003a48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	680e      	ldr	r6, [r1, #0]
 8003a50:	061f      	lsls	r7, r3, #24
 8003a52:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a56:	600e      	str	r6, [r1, #0]
 8003a58:	d514      	bpl.n	8003a84 <_printf_i+0x1ac>
 8003a5a:	07d9      	lsls	r1, r3, #31
 8003a5c:	bf44      	itt	mi
 8003a5e:	f043 0320 	orrmi.w	r3, r3, #32
 8003a62:	6023      	strmi	r3, [r4, #0]
 8003a64:	b91d      	cbnz	r5, 8003a6e <_printf_i+0x196>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	f023 0320 	bic.w	r3, r3, #32
 8003a6c:	6023      	str	r3, [r4, #0]
 8003a6e:	2310      	movs	r3, #16
 8003a70:	e7b0      	b.n	80039d4 <_printf_i+0xfc>
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	f043 0320 	orr.w	r3, r3, #32
 8003a78:	6023      	str	r3, [r4, #0]
 8003a7a:	2378      	movs	r3, #120	; 0x78
 8003a7c:	4828      	ldr	r0, [pc, #160]	; (8003b20 <_printf_i+0x248>)
 8003a7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a82:	e7e3      	b.n	8003a4c <_printf_i+0x174>
 8003a84:	065e      	lsls	r6, r3, #25
 8003a86:	bf48      	it	mi
 8003a88:	b2ad      	uxthmi	r5, r5
 8003a8a:	e7e6      	b.n	8003a5a <_printf_i+0x182>
 8003a8c:	4616      	mov	r6, r2
 8003a8e:	e7bb      	b.n	8003a08 <_printf_i+0x130>
 8003a90:	680b      	ldr	r3, [r1, #0]
 8003a92:	6826      	ldr	r6, [r4, #0]
 8003a94:	6960      	ldr	r0, [r4, #20]
 8003a96:	1d1d      	adds	r5, r3, #4
 8003a98:	600d      	str	r5, [r1, #0]
 8003a9a:	0635      	lsls	r5, r6, #24
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	d501      	bpl.n	8003aa4 <_printf_i+0x1cc>
 8003aa0:	6018      	str	r0, [r3, #0]
 8003aa2:	e002      	b.n	8003aaa <_printf_i+0x1d2>
 8003aa4:	0671      	lsls	r1, r6, #25
 8003aa6:	d5fb      	bpl.n	8003aa0 <_printf_i+0x1c8>
 8003aa8:	8018      	strh	r0, [r3, #0]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	6123      	str	r3, [r4, #16]
 8003aae:	4616      	mov	r6, r2
 8003ab0:	e7ba      	b.n	8003a28 <_printf_i+0x150>
 8003ab2:	680b      	ldr	r3, [r1, #0]
 8003ab4:	1d1a      	adds	r2, r3, #4
 8003ab6:	600a      	str	r2, [r1, #0]
 8003ab8:	681e      	ldr	r6, [r3, #0]
 8003aba:	6862      	ldr	r2, [r4, #4]
 8003abc:	2100      	movs	r1, #0
 8003abe:	4630      	mov	r0, r6
 8003ac0:	f7fc fb96 	bl	80001f0 <memchr>
 8003ac4:	b108      	cbz	r0, 8003aca <_printf_i+0x1f2>
 8003ac6:	1b80      	subs	r0, r0, r6
 8003ac8:	6060      	str	r0, [r4, #4]
 8003aca:	6863      	ldr	r3, [r4, #4]
 8003acc:	6123      	str	r3, [r4, #16]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ad4:	e7a8      	b.n	8003a28 <_printf_i+0x150>
 8003ad6:	6923      	ldr	r3, [r4, #16]
 8003ad8:	4632      	mov	r2, r6
 8003ada:	4649      	mov	r1, r9
 8003adc:	4640      	mov	r0, r8
 8003ade:	47d0      	blx	sl
 8003ae0:	3001      	adds	r0, #1
 8003ae2:	d0ab      	beq.n	8003a3c <_printf_i+0x164>
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	079b      	lsls	r3, r3, #30
 8003ae8:	d413      	bmi.n	8003b12 <_printf_i+0x23a>
 8003aea:	68e0      	ldr	r0, [r4, #12]
 8003aec:	9b03      	ldr	r3, [sp, #12]
 8003aee:	4298      	cmp	r0, r3
 8003af0:	bfb8      	it	lt
 8003af2:	4618      	movlt	r0, r3
 8003af4:	e7a4      	b.n	8003a40 <_printf_i+0x168>
 8003af6:	2301      	movs	r3, #1
 8003af8:	4632      	mov	r2, r6
 8003afa:	4649      	mov	r1, r9
 8003afc:	4640      	mov	r0, r8
 8003afe:	47d0      	blx	sl
 8003b00:	3001      	adds	r0, #1
 8003b02:	d09b      	beq.n	8003a3c <_printf_i+0x164>
 8003b04:	3501      	adds	r5, #1
 8003b06:	68e3      	ldr	r3, [r4, #12]
 8003b08:	9903      	ldr	r1, [sp, #12]
 8003b0a:	1a5b      	subs	r3, r3, r1
 8003b0c:	42ab      	cmp	r3, r5
 8003b0e:	dcf2      	bgt.n	8003af6 <_printf_i+0x21e>
 8003b10:	e7eb      	b.n	8003aea <_printf_i+0x212>
 8003b12:	2500      	movs	r5, #0
 8003b14:	f104 0619 	add.w	r6, r4, #25
 8003b18:	e7f5      	b.n	8003b06 <_printf_i+0x22e>
 8003b1a:	bf00      	nop
 8003b1c:	08003eed 	.word	0x08003eed
 8003b20:	08003efe 	.word	0x08003efe

08003b24 <__retarget_lock_acquire_recursive>:
 8003b24:	4770      	bx	lr

08003b26 <__retarget_lock_release_recursive>:
 8003b26:	4770      	bx	lr

08003b28 <memmove>:
 8003b28:	4288      	cmp	r0, r1
 8003b2a:	b510      	push	{r4, lr}
 8003b2c:	eb01 0402 	add.w	r4, r1, r2
 8003b30:	d902      	bls.n	8003b38 <memmove+0x10>
 8003b32:	4284      	cmp	r4, r0
 8003b34:	4623      	mov	r3, r4
 8003b36:	d807      	bhi.n	8003b48 <memmove+0x20>
 8003b38:	1e43      	subs	r3, r0, #1
 8003b3a:	42a1      	cmp	r1, r4
 8003b3c:	d008      	beq.n	8003b50 <memmove+0x28>
 8003b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b46:	e7f8      	b.n	8003b3a <memmove+0x12>
 8003b48:	4402      	add	r2, r0
 8003b4a:	4601      	mov	r1, r0
 8003b4c:	428a      	cmp	r2, r1
 8003b4e:	d100      	bne.n	8003b52 <memmove+0x2a>
 8003b50:	bd10      	pop	{r4, pc}
 8003b52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b5a:	e7f7      	b.n	8003b4c <memmove+0x24>

08003b5c <_free_r>:
 8003b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b5e:	2900      	cmp	r1, #0
 8003b60:	d048      	beq.n	8003bf4 <_free_r+0x98>
 8003b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b66:	9001      	str	r0, [sp, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f1a1 0404 	sub.w	r4, r1, #4
 8003b6e:	bfb8      	it	lt
 8003b70:	18e4      	addlt	r4, r4, r3
 8003b72:	f7ff fcdb 	bl	800352c <__malloc_lock>
 8003b76:	4a20      	ldr	r2, [pc, #128]	; (8003bf8 <_free_r+0x9c>)
 8003b78:	9801      	ldr	r0, [sp, #4]
 8003b7a:	6813      	ldr	r3, [r2, #0]
 8003b7c:	4615      	mov	r5, r2
 8003b7e:	b933      	cbnz	r3, 8003b8e <_free_r+0x32>
 8003b80:	6063      	str	r3, [r4, #4]
 8003b82:	6014      	str	r4, [r2, #0]
 8003b84:	b003      	add	sp, #12
 8003b86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b8a:	f7ff bcd5 	b.w	8003538 <__malloc_unlock>
 8003b8e:	42a3      	cmp	r3, r4
 8003b90:	d90b      	bls.n	8003baa <_free_r+0x4e>
 8003b92:	6821      	ldr	r1, [r4, #0]
 8003b94:	1862      	adds	r2, r4, r1
 8003b96:	4293      	cmp	r3, r2
 8003b98:	bf04      	itt	eq
 8003b9a:	681a      	ldreq	r2, [r3, #0]
 8003b9c:	685b      	ldreq	r3, [r3, #4]
 8003b9e:	6063      	str	r3, [r4, #4]
 8003ba0:	bf04      	itt	eq
 8003ba2:	1852      	addeq	r2, r2, r1
 8003ba4:	6022      	streq	r2, [r4, #0]
 8003ba6:	602c      	str	r4, [r5, #0]
 8003ba8:	e7ec      	b.n	8003b84 <_free_r+0x28>
 8003baa:	461a      	mov	r2, r3
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	b10b      	cbz	r3, 8003bb4 <_free_r+0x58>
 8003bb0:	42a3      	cmp	r3, r4
 8003bb2:	d9fa      	bls.n	8003baa <_free_r+0x4e>
 8003bb4:	6811      	ldr	r1, [r2, #0]
 8003bb6:	1855      	adds	r5, r2, r1
 8003bb8:	42a5      	cmp	r5, r4
 8003bba:	d10b      	bne.n	8003bd4 <_free_r+0x78>
 8003bbc:	6824      	ldr	r4, [r4, #0]
 8003bbe:	4421      	add	r1, r4
 8003bc0:	1854      	adds	r4, r2, r1
 8003bc2:	42a3      	cmp	r3, r4
 8003bc4:	6011      	str	r1, [r2, #0]
 8003bc6:	d1dd      	bne.n	8003b84 <_free_r+0x28>
 8003bc8:	681c      	ldr	r4, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	6053      	str	r3, [r2, #4]
 8003bce:	4421      	add	r1, r4
 8003bd0:	6011      	str	r1, [r2, #0]
 8003bd2:	e7d7      	b.n	8003b84 <_free_r+0x28>
 8003bd4:	d902      	bls.n	8003bdc <_free_r+0x80>
 8003bd6:	230c      	movs	r3, #12
 8003bd8:	6003      	str	r3, [r0, #0]
 8003bda:	e7d3      	b.n	8003b84 <_free_r+0x28>
 8003bdc:	6825      	ldr	r5, [r4, #0]
 8003bde:	1961      	adds	r1, r4, r5
 8003be0:	428b      	cmp	r3, r1
 8003be2:	bf04      	itt	eq
 8003be4:	6819      	ldreq	r1, [r3, #0]
 8003be6:	685b      	ldreq	r3, [r3, #4]
 8003be8:	6063      	str	r3, [r4, #4]
 8003bea:	bf04      	itt	eq
 8003bec:	1949      	addeq	r1, r1, r5
 8003bee:	6021      	streq	r1, [r4, #0]
 8003bf0:	6054      	str	r4, [r2, #4]
 8003bf2:	e7c7      	b.n	8003b84 <_free_r+0x28>
 8003bf4:	b003      	add	sp, #12
 8003bf6:	bd30      	pop	{r4, r5, pc}
 8003bf8:	200000ac 	.word	0x200000ac

08003bfc <_realloc_r>:
 8003bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfe:	4607      	mov	r7, r0
 8003c00:	4614      	mov	r4, r2
 8003c02:	460e      	mov	r6, r1
 8003c04:	b921      	cbnz	r1, 8003c10 <_realloc_r+0x14>
 8003c06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	f7ff bc04 	b.w	8003418 <_malloc_r>
 8003c10:	b922      	cbnz	r2, 8003c1c <_realloc_r+0x20>
 8003c12:	f7ff ffa3 	bl	8003b5c <_free_r>
 8003c16:	4625      	mov	r5, r4
 8003c18:	4628      	mov	r0, r5
 8003c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c1c:	f000 f814 	bl	8003c48 <_malloc_usable_size_r>
 8003c20:	42a0      	cmp	r0, r4
 8003c22:	d20f      	bcs.n	8003c44 <_realloc_r+0x48>
 8003c24:	4621      	mov	r1, r4
 8003c26:	4638      	mov	r0, r7
 8003c28:	f7ff fbf6 	bl	8003418 <_malloc_r>
 8003c2c:	4605      	mov	r5, r0
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	d0f2      	beq.n	8003c18 <_realloc_r+0x1c>
 8003c32:	4631      	mov	r1, r6
 8003c34:	4622      	mov	r2, r4
 8003c36:	f7ff fbc9 	bl	80033cc <memcpy>
 8003c3a:	4631      	mov	r1, r6
 8003c3c:	4638      	mov	r0, r7
 8003c3e:	f7ff ff8d 	bl	8003b5c <_free_r>
 8003c42:	e7e9      	b.n	8003c18 <_realloc_r+0x1c>
 8003c44:	4635      	mov	r5, r6
 8003c46:	e7e7      	b.n	8003c18 <_realloc_r+0x1c>

08003c48 <_malloc_usable_size_r>:
 8003c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c4c:	1f18      	subs	r0, r3, #4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	bfbc      	itt	lt
 8003c52:	580b      	ldrlt	r3, [r1, r0]
 8003c54:	18c0      	addlt	r0, r0, r3
 8003c56:	4770      	bx	lr

08003c58 <_init>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	bf00      	nop
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr

08003c64 <_fini>:
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c66:	bf00      	nop
 8003c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6a:	bc08      	pop	{r3}
 8003c6c:	469e      	mov	lr, r3
 8003c6e:	4770      	bx	lr
